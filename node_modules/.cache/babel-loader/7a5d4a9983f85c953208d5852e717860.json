{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _pngjs = require(\"pngjs\");\n\nvar _utils = require(\"@jimp/utils\");\n\nvar MIME_TYPE = 'image/png'; // PNG filter types\n\nvar PNG_FILTER_AUTO = -1;\nvar PNG_FILTER_NONE = 0;\nvar PNG_FILTER_SUB = 1;\nvar PNG_FILTER_UP = 2;\nvar PNG_FILTER_AVERAGE = 3;\nvar PNG_FILTER_PATH = 4;\n\nvar _default = function _default() {\n  return {\n    mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, ['png']),\n    constants: {\n      MIME_PNG: MIME_TYPE,\n      PNG_FILTER_AUTO: PNG_FILTER_AUTO,\n      PNG_FILTER_NONE: PNG_FILTER_NONE,\n      PNG_FILTER_SUB: PNG_FILTER_SUB,\n      PNG_FILTER_UP: PNG_FILTER_UP,\n      PNG_FILTER_AVERAGE: PNG_FILTER_AVERAGE,\n      PNG_FILTER_PATH: PNG_FILTER_PATH\n    },\n    hasAlpha: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, true),\n    decoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, _pngjs.PNG.sync.read),\n    encoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function (data) {\n      var png = new _pngjs.PNG({\n        width: data.bitmap.width,\n        height: data.bitmap.height\n      });\n      png.data = data.bitmap.data;\n      return _pngjs.PNG.sync.write(png, {\n        width: data.bitmap.width,\n        height: data.bitmap.height,\n        deflateLevel: data._deflateLevel,\n        deflateStrategy: data._deflateStrategy,\n        filterType: data._filterType,\n        colorType: typeof data._colorType === 'number' ? data._colorType : data._rgba ? 6 : 2,\n        inputHasAlpha: data._rgba\n      });\n    }),\n    \"class\": {\n      _deflateLevel: 9,\n      _deflateStrategy: 3,\n      _filterType: PNG_FILTER_AUTO,\n      _colorType: null,\n\n      /**\n       * Sets the deflate level used when saving as PNG format (default is 9)\n       * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      deflateLevel: function deflateLevel(l, cb) {\n        if (typeof l !== 'number') {\n          return _utils.throwError.call(this, 'l must be a number', cb);\n        }\n\n        if (l < 0 || l > 9) {\n          return _utils.throwError.call(this, 'l must be a number 0 - 9', cb);\n        }\n\n        this._deflateLevel = Math.round(l);\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      },\n\n      /**\n       * Sets the deflate strategy used when saving as PNG format (default is 3)\n       * @param {number} s Deflate strategy to use 0-3.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      deflateStrategy: function deflateStrategy(s, cb) {\n        if (typeof s !== 'number') {\n          return _utils.throwError.call(this, 's must be a number', cb);\n        }\n\n        if (s < 0 || s > 3) {\n          return _utils.throwError.call(this, 's must be a number 0 - 3', cb);\n        }\n\n        this._deflateStrategy = Math.round(s);\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      },\n\n      /**\n       * Sets the filter type used when saving as PNG format (default is automatic filters)\n       * @param {number} f The quality to use -1-4.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      filterType: function filterType(f, cb) {\n        if (typeof f !== 'number') {\n          return _utils.throwError.call(this, 'n must be a number', cb);\n        }\n\n        if (f < -1 || f > 4) {\n          return _utils.throwError.call(this, 'n must be -1 (auto) or a number 0 - 4', cb);\n        }\n\n        this._filterType = Math.round(f);\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      },\n\n      /**\n       * Sets the color type used when saving as PNG format\n       * @param {number} s color type to use 0, 2, 4, 6.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      colorType: function colorType(s, cb) {\n        if (typeof s !== 'number') {\n          return _utils.throwError.call(this, 's must be a number', cb);\n        }\n\n        if (s !== 0 && s !== 2 && s !== 4 && s !== 6) {\n          return _utils.throwError.call(this, 's must be a number 0, 2, 4, 6.', cb);\n        }\n\n        this._colorType = Math.round(s);\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      }\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"mappings":"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","names":["MIME_TYPE","PNG_FILTER_AUTO","PNG_FILTER_NONE","PNG_FILTER_SUB","PNG_FILTER_UP","PNG_FILTER_AVERAGE","PNG_FILTER_PATH","mime","constants","MIME_PNG","hasAlpha","decoders","PNG","sync","read","encoders","png","width","data","bitmap","height","write","deflateLevel","_deflateLevel","deflateStrategy","_deflateStrategy","filterType","_filterType","colorType","_colorType","_rgba","inputHasAlpha","l","cb","throwError","call","Math","round","s","f"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\@jimp\\png\\src\\index.js"],"sourcesContent":["import { PNG } from 'pngjs';\nimport { throwError, isNodePattern } from '@jimp/utils';\n\nconst MIME_TYPE = 'image/png';\n\n// PNG filter types\nconst PNG_FILTER_AUTO = -1;\nconst PNG_FILTER_NONE = 0;\nconst PNG_FILTER_SUB = 1;\nconst PNG_FILTER_UP = 2;\nconst PNG_FILTER_AVERAGE = 3;\nconst PNG_FILTER_PATH = 4;\n\nexport default () => ({\n  mime: { [MIME_TYPE]: ['png'] },\n\n  constants: {\n    MIME_PNG: MIME_TYPE,\n    PNG_FILTER_AUTO,\n    PNG_FILTER_NONE,\n    PNG_FILTER_SUB,\n    PNG_FILTER_UP,\n    PNG_FILTER_AVERAGE,\n    PNG_FILTER_PATH\n  },\n\n  hasAlpha: { [MIME_TYPE]: true },\n  decoders: { [MIME_TYPE]: PNG.sync.read },\n  encoders: {\n    [MIME_TYPE]: data => {\n      const png = new PNG({\n        width: data.bitmap.width,\n        height: data.bitmap.height\n      });\n\n      png.data = data.bitmap.data;\n\n      return PNG.sync.write(png, {\n        width: data.bitmap.width,\n        height: data.bitmap.height,\n        deflateLevel: data._deflateLevel,\n        deflateStrategy: data._deflateStrategy,\n        filterType: data._filterType,\n        colorType:\n          typeof data._colorType === 'number'\n            ? data._colorType\n            : data._rgba\n              ? 6\n              : 2,\n        inputHasAlpha: data._rgba\n      });\n    }\n  },\n\n  class: {\n    _deflateLevel: 9,\n    _deflateStrategy: 3,\n    _filterType: PNG_FILTER_AUTO,\n    _colorType: null,\n\n    /**\n     * Sets the deflate level used when saving as PNG format (default is 9)\n     * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateLevel(l, cb) {\n      if (typeof l !== 'number') {\n        return throwError.call(this, 'l must be a number', cb);\n      }\n\n      if (l < 0 || l > 9) {\n        return throwError.call(this, 'l must be a number 0 - 9', cb);\n      }\n\n      this._deflateLevel = Math.round(l);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets the deflate strategy used when saving as PNG format (default is 3)\n     * @param {number} s Deflate strategy to use 0-3.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateStrategy(s, cb) {\n      if (typeof s !== 'number') {\n        return throwError.call(this, 's must be a number', cb);\n      }\n\n      if (s < 0 || s > 3) {\n        return throwError.call(this, 's must be a number 0 - 3', cb);\n      }\n\n      this._deflateStrategy = Math.round(s);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets the filter type used when saving as PNG format (default is automatic filters)\n     * @param {number} f The quality to use -1-4.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    filterType(f, cb) {\n      if (typeof f !== 'number') {\n        return throwError.call(this, 'n must be a number', cb);\n      }\n\n      if (f < -1 || f > 4) {\n        return throwError.call(\n          this,\n          'n must be -1 (auto) or a number 0 - 4',\n          cb\n        );\n      }\n\n      this._filterType = Math.round(f);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n    /**\n     * Sets the color type used when saving as PNG format\n     * @param {number} s color type to use 0, 2, 4, 6.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */ colorType(s, cb) {\n      if (typeof s !== 'number') {\n        return throwError.call(this, 's must be a number', cb);\n      }\n\n      if (s !== 0 && s !== 2 && s !== 4 && s !== 6) {\n        return throwError.call(this, 's must be a number 0, 2, 4, 6.', cb);\n      }\n\n      this._colorType = Math.round(s);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}