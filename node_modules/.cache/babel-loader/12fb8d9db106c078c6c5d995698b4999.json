{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseBitmap = parseBitmap;\nexports.getBuffer = getBuffer;\nexports.getBufferAsync = getBufferAsync;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _fileType = _interopRequireDefault(require(\"file-type\"));\n\nvar _exifParser = _interopRequireDefault(require(\"exif-parser\"));\n\nvar _utils = require(\"@jimp/utils\");\n\nvar constants = _interopRequireWildcard(require(\"../constants\"));\n\nvar MIME = _interopRequireWildcard(require(\"./mime\"));\n\nvar _promisify = _interopRequireDefault(require(\"./promisify\"));\n\nfunction getMIMEFromBuffer(buffer, path) {\n  var fileTypeFromBuffer = (0, _fileType[\"default\"])(buffer);\n\n  if (fileTypeFromBuffer) {\n    // If fileType returns something for buffer, then return the mime given\n    return fileTypeFromBuffer.mime;\n  }\n\n  if (path) {\n    // If a path is supplied, and fileType yields no results, then retry with MIME\n    // Path can be either a file path or a url\n    return MIME.getType(path);\n  }\n\n  return null;\n}\n/*\n * Obtains image orientation from EXIF metadata.\n *\n * @param img {Jimp} a Jimp image object\n * @returns {number} a number 1-8 representing EXIF orientation,\n *          in particular 1 if orientation tag is missing\n */\n\n\nfunction getExifOrientation(img) {\n  return img._exif && img._exif.tags && img._exif.tags.Orientation || 1;\n}\n/**\n * Returns a function which translates EXIF-rotated coordinates into\n * non-rotated ones.\n *\n * Transformation reference: http://sylvana.net/jpegcrop/exif_orientation.html.\n *\n * @param img {Jimp} a Jimp image object\n * @returns {function} transformation function for transformBitmap().\n */\n\n\nfunction getExifOrientationTransformation(img) {\n  var w = img.getWidth();\n  var h = img.getHeight();\n\n  switch (getExifOrientation(img)) {\n    case 1:\n      // Horizontal (normal)\n      // does not need to be supported here\n      return null;\n\n    case 2:\n      // Mirror horizontal\n      return function (x, y) {\n        return [w - x - 1, y];\n      };\n\n    case 3:\n      // Rotate 180\n      return function (x, y) {\n        return [w - x - 1, h - y - 1];\n      };\n\n    case 4:\n      // Mirror vertical\n      return function (x, y) {\n        return [x, h - y - 1];\n      };\n\n    case 5:\n      // Mirror horizontal and rotate 270 CW\n      return function (x, y) {\n        return [y, x];\n      };\n\n    case 6:\n      // Rotate 90 CW\n      return function (x, y) {\n        return [y, h - x - 1];\n      };\n\n    case 7:\n      // Mirror horizontal and rotate 90 CW\n      return function (x, y) {\n        return [w - y - 1, h - x - 1];\n      };\n\n    case 8:\n      // Rotate 270 CW\n      return function (x, y) {\n        return [w - y - 1, x];\n      };\n\n    default:\n      return null;\n  }\n}\n/*\n * Transforms bitmap in place (moves pixels around) according to given\n * transformation function.\n *\n * @param img {Jimp} a Jimp image object, which bitmap is supposed to\n *        be transformed\n * @param width {number} bitmap width after the transformation\n * @param height {number} bitmap height after the transformation\n * @param transformation {function} transformation function which defines pixel\n *        mapping between new and source bitmap. It takes a pair of coordinates\n *        in the target, and returns a respective pair of coordinates in\n *        the source bitmap, i.e. has following form:\n *        `function(new_x, new_y) { return [src_x, src_y] }`.\n */\n\n\nfunction transformBitmap(img, width, height, transformation) {\n  // Underscore-prefixed values are related to the source bitmap\n  // Their counterparts with no prefix are related to the target bitmap\n  var _data = img.bitmap.data;\n  var _width = img.bitmap.width;\n  var data = Buffer.alloc(_data.length);\n\n  for (var x = 0; x < width; x++) {\n    for (var y = 0; y < height; y++) {\n      var _transformation = transformation(x, y),\n          _transformation2 = (0, _slicedToArray2[\"default\"])(_transformation, 2),\n          _x = _transformation2[0],\n          _y = _transformation2[1];\n\n      var idx = width * y + x << 2;\n\n      var _idx = _width * _y + _x << 2;\n\n      var pixel = _data.readUInt32BE(_idx);\n\n      data.writeUInt32BE(pixel, idx);\n    }\n  }\n\n  img.bitmap.data = data;\n  img.bitmap.width = width;\n  img.bitmap.height = height;\n}\n/*\n * Automagically rotates an image based on its EXIF data (if present).\n * @param img {Jimp} a Jimp image object\n */\n\n\nfunction exifRotate(img) {\n  if (getExifOrientation(img) < 2) return;\n  var transformation = getExifOrientationTransformation(img);\n  var swapDimensions = getExifOrientation(img) > 4;\n  var newWidth = swapDimensions ? img.bitmap.height : img.bitmap.width;\n  var newHeight = swapDimensions ? img.bitmap.width : img.bitmap.height;\n  transformBitmap(img, newWidth, newHeight, transformation);\n} // parses a bitmap from the constructor to the JIMP bitmap property\n\n\nfunction parseBitmap(data, path, cb) {\n  var mime = getMIMEFromBuffer(data, path);\n\n  if (typeof mime !== 'string') {\n    return cb(new Error('Could not find MIME for Buffer <' + path + '>'));\n  }\n\n  this._originalMime = mime.toLowerCase();\n\n  try {\n    var _mime = this.getMIME();\n\n    if (this.constructor.decoders[_mime]) {\n      this.bitmap = this.constructor.decoders[_mime](data);\n    } else {\n      return _utils.throwError.call(this, 'Unsupported MIME type: ' + _mime, cb);\n    }\n  } catch (error) {\n    return cb.call(this, error, this);\n  }\n\n  try {\n    this._exif = _exifParser[\"default\"].create(data).parse();\n    exifRotate(this); // EXIF data\n  } catch (error) {\n    /* meh */\n  }\n\n  cb.call(this, null, this);\n  return this;\n}\n\nfunction compositeBitmapOverBackground(Jimp, image) {\n  return new Jimp(image.bitmap.width, image.bitmap.height, image._background).composite(image, 0, 0).bitmap;\n}\n/**\n * Converts the image to a buffer\n * @param {string} mime the mime type of the image buffer to be created\n * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n * @returns {Jimp} this for chaining of methods\n */\n\n\nfunction getBuffer(mime, cb) {\n  if (mime === constants.AUTO) {\n    // allow auto MIME detection\n    mime = this.getMIME();\n  }\n\n  if (typeof mime !== 'string') {\n    return _utils.throwError.call(this, 'mime must be a string', cb);\n  }\n\n  if (typeof cb !== 'function') {\n    return _utils.throwError.call(this, 'cb must be a function', cb);\n  }\n\n  mime = mime.toLowerCase();\n\n  if (this._rgba && this.constructor.hasAlpha[mime]) {\n    this.bitmap.data = Buffer.from(this.bitmap.data);\n  } else {\n    // when format doesn't support alpha\n    // composite onto a new image so that the background shows through alpha channels\n    this.bitmap.data = compositeBitmapOverBackground(this.constructor, this).data;\n  }\n\n  if (this.constructor.encoders[mime]) {\n    var buffer = this.constructor.encoders[mime](this);\n    cb.call(this, null, buffer);\n  } else {\n    cb.call(this, 'Unsupported MIME type: ' + mime);\n  }\n\n  return this;\n}\n\nfunction getBufferAsync(mime) {\n  return (0, _promisify[\"default\"])(getBuffer, this, mime);\n}","map":{"version":3,"mappings":"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","names":["getMIMEFromBuffer","buffer","path","fileTypeFromBuffer","mime","MIME","getType","getExifOrientation","img","_exif","tags","Orientation","getExifOrientationTransformation","w","getWidth","h","getHeight","x","y","transformBitmap","width","height","transformation","_data","bitmap","data","_width","Buffer","alloc","length","_x","_y","idx","_idx","pixel","readUInt32BE","writeUInt32BE","exifRotate","swapDimensions","newWidth","newHeight","parseBitmap","cb","Error","_originalMime","toLowerCase","getMIME","constructor","decoders","throwError","call","error","EXIFParser","create","parse","compositeBitmapOverBackground","Jimp","image","_background","composite","getBuffer","constants","AUTO","_rgba","hasAlpha","from","encoders","getBufferAsync"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\@jimp\\core\\src\\utils\\image-bitmap.js"],"sourcesContent":["import fileType from 'file-type';\n\nimport EXIFParser from 'exif-parser';\nimport { throwError } from '@jimp/utils';\n\nimport * as constants from '../constants';\nimport * as MIME from './mime';\nimport promisify from './promisify';\n\nfunction getMIMEFromBuffer(buffer, path) {\n  const fileTypeFromBuffer = fileType(buffer);\n\n  if (fileTypeFromBuffer) {\n    // If fileType returns something for buffer, then return the mime given\n    return fileTypeFromBuffer.mime;\n  }\n\n  if (path) {\n    // If a path is supplied, and fileType yields no results, then retry with MIME\n    // Path can be either a file path or a url\n    return MIME.getType(path);\n  }\n\n  return null;\n}\n\n/*\n * Obtains image orientation from EXIF metadata.\n *\n * @param img {Jimp} a Jimp image object\n * @returns {number} a number 1-8 representing EXIF orientation,\n *          in particular 1 if orientation tag is missing\n */\nfunction getExifOrientation(img) {\n  return (img._exif && img._exif.tags && img._exif.tags.Orientation) || 1;\n}\n\n/**\n * Returns a function which translates EXIF-rotated coordinates into\n * non-rotated ones.\n *\n * Transformation reference: http://sylvana.net/jpegcrop/exif_orientation.html.\n *\n * @param img {Jimp} a Jimp image object\n * @returns {function} transformation function for transformBitmap().\n */\nfunction getExifOrientationTransformation(img) {\n  const w = img.getWidth();\n  const h = img.getHeight();\n\n  switch (getExifOrientation(img)) {\n    case 1: // Horizontal (normal)\n      // does not need to be supported here\n      return null;\n\n    case 2: // Mirror horizontal\n      return function(x, y) {\n        return [w - x - 1, y];\n      };\n\n    case 3: // Rotate 180\n      return function(x, y) {\n        return [w - x - 1, h - y - 1];\n      };\n\n    case 4: // Mirror vertical\n      return function(x, y) {\n        return [x, h - y - 1];\n      };\n\n    case 5: // Mirror horizontal and rotate 270 CW\n      return function(x, y) {\n        return [y, x];\n      };\n\n    case 6: // Rotate 90 CW\n      return function(x, y) {\n        return [y, h - x - 1];\n      };\n\n    case 7: // Mirror horizontal and rotate 90 CW\n      return function(x, y) {\n        return [w - y - 1, h - x - 1];\n      };\n\n    case 8: // Rotate 270 CW\n      return function(x, y) {\n        return [w - y - 1, x];\n      };\n\n    default:\n      return null;\n  }\n}\n\n/*\n * Transforms bitmap in place (moves pixels around) according to given\n * transformation function.\n *\n * @param img {Jimp} a Jimp image object, which bitmap is supposed to\n *        be transformed\n * @param width {number} bitmap width after the transformation\n * @param height {number} bitmap height after the transformation\n * @param transformation {function} transformation function which defines pixel\n *        mapping between new and source bitmap. It takes a pair of coordinates\n *        in the target, and returns a respective pair of coordinates in\n *        the source bitmap, i.e. has following form:\n *        `function(new_x, new_y) { return [src_x, src_y] }`.\n */\nfunction transformBitmap(img, width, height, transformation) {\n  // Underscore-prefixed values are related to the source bitmap\n  // Their counterparts with no prefix are related to the target bitmap\n  const _data = img.bitmap.data;\n  const _width = img.bitmap.width;\n\n  const data = Buffer.alloc(_data.length);\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const [_x, _y] = transformation(x, y);\n\n      const idx = (width * y + x) << 2;\n      const _idx = (_width * _y + _x) << 2;\n\n      const pixel = _data.readUInt32BE(_idx);\n      data.writeUInt32BE(pixel, idx);\n    }\n  }\n\n  img.bitmap.data = data;\n  img.bitmap.width = width;\n  img.bitmap.height = height;\n}\n\n/*\n * Automagically rotates an image based on its EXIF data (if present).\n * @param img {Jimp} a Jimp image object\n */\nfunction exifRotate(img) {\n  if (getExifOrientation(img) < 2) return;\n\n  const transformation = getExifOrientationTransformation(img);\n  const swapDimensions = getExifOrientation(img) > 4;\n\n  const newWidth = swapDimensions ? img.bitmap.height : img.bitmap.width;\n  const newHeight = swapDimensions ? img.bitmap.width : img.bitmap.height;\n\n  transformBitmap(img, newWidth, newHeight, transformation);\n}\n\n// parses a bitmap from the constructor to the JIMP bitmap property\nexport function parseBitmap(data, path, cb) {\n  const mime = getMIMEFromBuffer(data, path);\n\n  if (typeof mime !== 'string') {\n    return cb(new Error('Could not find MIME for Buffer <' + path + '>'));\n  }\n\n  this._originalMime = mime.toLowerCase();\n\n  try {\n    const mime = this.getMIME();\n\n    if (this.constructor.decoders[mime]) {\n      this.bitmap = this.constructor.decoders[mime](data);\n    } else {\n      return throwError.call(this, 'Unsupported MIME type: ' + mime, cb);\n    }\n  } catch (error) {\n    return cb.call(this, error, this);\n  }\n\n  try {\n    this._exif = EXIFParser.create(data).parse();\n    exifRotate(this); // EXIF data\n  } catch (error) {\n    /* meh */\n  }\n\n  cb.call(this, null, this);\n\n  return this;\n}\n\nfunction compositeBitmapOverBackground(Jimp, image) {\n  return new Jimp(\n    image.bitmap.width,\n    image.bitmap.height,\n    image._background\n  ).composite(image, 0, 0).bitmap;\n}\n\n/**\n * Converts the image to a buffer\n * @param {string} mime the mime type of the image buffer to be created\n * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n * @returns {Jimp} this for chaining of methods\n */\nexport function getBuffer(mime, cb) {\n  if (mime === constants.AUTO) {\n    // allow auto MIME detection\n    mime = this.getMIME();\n  }\n\n  if (typeof mime !== 'string') {\n    return throwError.call(this, 'mime must be a string', cb);\n  }\n\n  if (typeof cb !== 'function') {\n    return throwError.call(this, 'cb must be a function', cb);\n  }\n\n  mime = mime.toLowerCase();\n\n  if (this._rgba && this.constructor.hasAlpha[mime]) {\n    this.bitmap.data = Buffer.from(this.bitmap.data);\n  } else {\n    // when format doesn't support alpha\n    // composite onto a new image so that the background shows through alpha channels\n    this.bitmap.data = compositeBitmapOverBackground(\n      this.constructor,\n      this\n    ).data;\n  }\n\n  if (this.constructor.encoders[mime]) {\n    const buffer = this.constructor.encoders[mime](this);\n    cb.call(this, null, buffer);\n  } else {\n    cb.call(this, 'Unsupported MIME type: ' + mime);\n  }\n\n  return this;\n}\n\nexport function getBufferAsync(mime) {\n  return promisify(getBuffer, this, mime);\n}\n"]},"metadata":{},"sourceType":"script"}