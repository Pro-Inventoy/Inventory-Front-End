{"ast":null,"code":"'use strict';\n\nvar constants = require('./constants');\n\nmodule.exports = function (dataIn, width, height, options) {\n  var outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;\n\n  if (options.colorType === options.inputColorType) {\n    var bigEndian = function () {\n      var buffer = new ArrayBuffer(2);\n      new DataView(buffer).setInt16(0, 256, true\n      /* littleEndian */\n      ); // Int16Array uses the platform's endianness.\n\n      return new Int16Array(buffer)[0] !== 256;\n    }(); // If no need to convert to grayscale and alpha is present/absent in both, take a fast route\n\n\n    if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {\n      return dataIn;\n    }\n  } // map to a UInt16 array if data is 16bit, fix endianness below\n\n\n  var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);\n  var maxValue = 255;\n  var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];\n\n  if (inBpp === 4 && !options.inputHasAlpha) {\n    inBpp = 3;\n  }\n\n  var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];\n\n  if (options.bitDepth === 16) {\n    maxValue = 65535;\n    outBpp *= 2;\n  }\n\n  var outData = new Buffer(width * height * outBpp);\n  var inIndex = 0;\n  var outIndex = 0;\n  var bgColor = options.bgColor || {};\n\n  if (bgColor.red === undefined) {\n    bgColor.red = maxValue;\n  }\n\n  if (bgColor.green === undefined) {\n    bgColor.green = maxValue;\n  }\n\n  if (bgColor.blue === undefined) {\n    bgColor.blue = maxValue;\n  }\n\n  function getRGBA() {\n    var red;\n    var green;\n    var blue;\n    var alpha = maxValue;\n\n    switch (options.inputColorType) {\n      case constants.COLORTYPE_COLOR_ALPHA:\n        alpha = data[inIndex + 3];\n        red = data[inIndex];\n        green = data[inIndex + 1];\n        blue = data[inIndex + 2];\n        break;\n\n      case constants.COLORTYPE_COLOR:\n        red = data[inIndex];\n        green = data[inIndex + 1];\n        blue = data[inIndex + 2];\n        break;\n\n      case constants.COLORTYPE_ALPHA:\n        alpha = data[inIndex + 1];\n        red = data[inIndex];\n        green = red;\n        blue = red;\n        break;\n\n      case constants.COLORTYPE_GRAYSCALE:\n        red = data[inIndex];\n        green = red;\n        blue = red;\n        break;\n\n      default:\n        throw new Error('input color type:' + options.inputColorType + ' is not supported at present');\n    }\n\n    if (options.inputHasAlpha) {\n      if (!outHasAlpha) {\n        alpha /= maxValue;\n        red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);\n        green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);\n        blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);\n      }\n    }\n\n    return {\n      red: red,\n      green: green,\n      blue: blue,\n      alpha: alpha\n    };\n  }\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var rgba = getRGBA(data, inIndex);\n\n      switch (options.colorType) {\n        case constants.COLORTYPE_COLOR_ALPHA:\n        case constants.COLORTYPE_COLOR:\n          if (options.bitDepth === 8) {\n            outData[outIndex] = rgba.red;\n            outData[outIndex + 1] = rgba.green;\n            outData[outIndex + 2] = rgba.blue;\n\n            if (outHasAlpha) {\n              outData[outIndex + 3] = rgba.alpha;\n            }\n          } else {\n            outData.writeUInt16BE(rgba.red, outIndex);\n            outData.writeUInt16BE(rgba.green, outIndex + 2);\n            outData.writeUInt16BE(rgba.blue, outIndex + 4);\n\n            if (outHasAlpha) {\n              outData.writeUInt16BE(rgba.alpha, outIndex + 6);\n            }\n          }\n\n          break;\n\n        case constants.COLORTYPE_ALPHA:\n        case constants.COLORTYPE_GRAYSCALE:\n          // Convert to grayscale and alpha\n          var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;\n\n          if (options.bitDepth === 8) {\n            outData[outIndex] = grayscale;\n\n            if (outHasAlpha) {\n              outData[outIndex + 1] = rgba.alpha;\n            }\n          } else {\n            outData.writeUInt16BE(grayscale, outIndex);\n\n            if (outHasAlpha) {\n              outData.writeUInt16BE(rgba.alpha, outIndex + 2);\n            }\n          }\n\n          break;\n\n        default:\n          throw new Error('unrecognised color Type ' + options.colorType);\n      }\n\n      inIndex += inBpp;\n      outIndex += outBpp;\n    }\n  }\n\n  return outData;\n};","map":{"version":3,"names":["constants","require","module","exports","dataIn","width","height","options","outHasAlpha","COLORTYPE_COLOR_ALPHA","COLORTYPE_ALPHA","indexOf","colorType","inputColorType","bigEndian","buffer","ArrayBuffer","DataView","setInt16","Int16Array","bitDepth","data","Uint16Array","maxValue","inBpp","COLORTYPE_TO_BPP_MAP","inputHasAlpha","outBpp","outData","Buffer","inIndex","outIndex","bgColor","red","undefined","green","blue","getRGBA","alpha","COLORTYPE_COLOR","COLORTYPE_GRAYSCALE","Error","Math","min","max","round","y","x","rgba","writeUInt16BE","grayscale"],"sources":["C:/Users/khaym/Desktop/finalproject/Inventory-Front-End/node_modules/pngjs/lib/bitpacker.js"],"sourcesContent":["'use strict';\n\nvar constants = require('./constants');\n\nmodule.exports = function(dataIn, width, height, options) {\n  var outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;\n  if (options.colorType === options.inputColorType) {\n    var bigEndian = (function() {\n      var buffer = new ArrayBuffer(2);\n      new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n      // Int16Array uses the platform's endianness.\n      return new Int16Array(buffer)[0] !== 256;\n    })();\n    // If no need to convert to grayscale and alpha is present/absent in both, take a fast route\n    if (options.bitDepth === 8 || (options.bitDepth === 16 && bigEndian)) {\n      return dataIn;\n    }\n  }\n\n  // map to a UInt16 array if data is 16bit, fix endianness below\n  var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);\n\n  var maxValue = 255;\n  var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];\n  if (inBpp === 4 && !options.inputHasAlpha) {\n    inBpp = 3;\n  }\n  var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];\n  if (options.bitDepth === 16) {\n    maxValue = 65535;\n    outBpp *= 2;\n  }\n  var outData = new Buffer(width * height * outBpp);\n\n  var inIndex = 0;\n  var outIndex = 0;\n\n  var bgColor = options.bgColor || {};\n  if (bgColor.red === undefined) {\n    bgColor.red = maxValue;\n  }\n  if (bgColor.green === undefined) {\n    bgColor.green = maxValue;\n  }\n  if (bgColor.blue === undefined) {\n    bgColor.blue = maxValue;\n  }\n\n  function getRGBA() {\n    var red;\n    var green;\n    var blue;\n    var alpha = maxValue;\n    switch (options.inputColorType) {\n      case constants.COLORTYPE_COLOR_ALPHA:\n        alpha = data[inIndex + 3];\n        red = data[inIndex];\n        green = data[inIndex + 1];\n        blue = data[inIndex + 2];\n        break;\n      case constants.COLORTYPE_COLOR:\n        red = data[inIndex];\n        green = data[inIndex + 1];\n        blue = data[inIndex + 2];\n        break;\n      case constants.COLORTYPE_ALPHA:\n        alpha = data[inIndex + 1];\n        red = data[inIndex];\n        green = red;\n        blue = red;\n        break;\n      case constants.COLORTYPE_GRAYSCALE:\n        red = data[inIndex];\n        green = red;\n        blue = red;\n        break;\n      default:\n        throw new Error('input color type:' + options.inputColorType + ' is not supported at present');\n    }\n\n    if (options.inputHasAlpha) {\n      if (!outHasAlpha) {\n        alpha /= maxValue;\n        red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);\n        green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);\n        blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);\n      }\n    }\n    return { red: red, green: green, blue: blue, alpha: alpha };\n  }\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var rgba = getRGBA(data, inIndex);\n\n      switch (options.colorType) {\n        case constants.COLORTYPE_COLOR_ALPHA:\n        case constants.COLORTYPE_COLOR:\n          if (options.bitDepth === 8) {\n            outData[outIndex] = rgba.red;\n            outData[outIndex + 1] = rgba.green;\n            outData[outIndex + 2] = rgba.blue;\n            if (outHasAlpha) {\n              outData[outIndex + 3] = rgba.alpha;\n            }\n          }\n          else {\n            outData.writeUInt16BE(rgba.red, outIndex);\n            outData.writeUInt16BE(rgba.green, outIndex + 2);\n            outData.writeUInt16BE(rgba.blue, outIndex + 4);\n            if (outHasAlpha) {\n              outData.writeUInt16BE(rgba.alpha, outIndex + 6);\n            }\n          }\n          break;\n        case constants.COLORTYPE_ALPHA:\n        case constants.COLORTYPE_GRAYSCALE:\n          // Convert to grayscale and alpha\n          var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;\n          if (options.bitDepth === 8) {\n            outData[outIndex] = grayscale;\n            if (outHasAlpha) {\n              outData[outIndex + 1] = rgba.alpha;\n            }\n          }\n          else {\n            outData.writeUInt16BE(grayscale, outIndex);\n            if (outHasAlpha) {\n              outData.writeUInt16BE(rgba.alpha, outIndex + 2);\n            }\n          }\n          break;\n        default:\n          throw new Error('unrecognised color Type ' + options.colorType);\n      }\n\n      inIndex += inBpp;\n      outIndex += outBpp;\n    }\n  }\n\n  return outData;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}