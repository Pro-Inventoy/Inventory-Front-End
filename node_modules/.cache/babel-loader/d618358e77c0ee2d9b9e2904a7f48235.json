{"ast":null,"code":"var xhr = require('xhr');\n\nvar noop = function () {};\n\nvar parseASCII = require('parse-bmfont-ascii');\n\nvar parseXML = require('parse-bmfont-xml');\n\nvar readBinary = require('parse-bmfont-binary');\n\nvar isBinaryFormat = require('./lib/is-binary');\n\nvar xtend = require('xtend');\n\nvar xml2 = function hasXML2() {\n  return self.XMLHttpRequest && \"withCredentials\" in new XMLHttpRequest();\n}();\n\nmodule.exports = function (opt, cb) {\n  cb = typeof cb === 'function' ? cb : noop;\n  if (typeof opt === 'string') opt = {\n    uri: opt\n  };else if (!opt) opt = {};\n  var expectBinary = opt.binary;\n  if (expectBinary) opt = getBinaryOpts(opt);\n  xhr(opt, function (err, res, body) {\n    if (err) return cb(err);\n    if (!/^2/.test(res.statusCode)) return cb(new Error('http status code: ' + res.statusCode));\n    if (!body) return cb(new Error('no body result'));\n    var binary = false; //if the response type is an array buffer,\n    //we need to convert it into a regular Buffer object\n\n    if (isArrayBuffer(body)) {\n      var array = new Uint8Array(body);\n      body = Buffer.from(array, 'binary');\n    } //now check the string/Buffer response\n    //and see if it has a binary BMF header\n\n\n    if (isBinaryFormat(body)) {\n      binary = true; //if we have a string, turn it into a Buffer\n\n      if (typeof body === 'string') body = Buffer.from(body, 'binary');\n    } //we are not parsing a binary format, just ASCII/XML/etc\n\n\n    if (!binary) {\n      //might still be a buffer if responseType is 'arraybuffer'\n      if (Buffer.isBuffer(body)) body = body.toString(opt.encoding);\n      body = body.trim();\n    }\n\n    var result;\n\n    try {\n      var type = res.headers['content-type'];\n      if (binary) result = readBinary(body);else if (/json/.test(type) || body.charAt(0) === '{') result = JSON.parse(body);else if (/xml/.test(type) || body.charAt(0) === '<') result = parseXML(body);else result = parseASCII(body);\n    } catch (e) {\n      cb(new Error('error parsing font ' + e.message));\n      cb = noop;\n    }\n\n    cb(null, result);\n  });\n};\n\nfunction isArrayBuffer(arr) {\n  var str = Object.prototype.toString;\n  return str.call(arr) === '[object ArrayBuffer]';\n}\n\nfunction getBinaryOpts(opt) {\n  //IE10+ and other modern browsers support array buffers\n  if (xml2) return xtend(opt, {\n    responseType: 'arraybuffer'\n  });\n  if (typeof self.XMLHttpRequest === 'undefined') throw new Error('your browser does not support XHR loading'); //IE9 and XML1 browsers could still use an override\n\n  var req = new self.XMLHttpRequest();\n  req.overrideMimeType('text/plain; charset=x-user-defined');\n  return xtend({\n    xhr: req\n  }, opt);\n}","map":{"version":3,"names":["xhr","require","noop","parseASCII","parseXML","readBinary","isBinaryFormat","xtend","xml2","hasXML2","self","XMLHttpRequest","module","exports","opt","cb","uri","expectBinary","binary","getBinaryOpts","err","res","body","test","statusCode","Error","isArrayBuffer","array","Uint8Array","Buffer","from","isBuffer","toString","encoding","trim","result","type","headers","charAt","JSON","parse","e","message","arr","str","Object","prototype","call","responseType","req","overrideMimeType"],"sources":["C:/Users/khaym/Desktop/finalproject/Inventory-Front-End/node_modules/load-bmfont/browser.js"],"sourcesContent":["var xhr = require('xhr')\nvar noop = function(){}\nvar parseASCII = require('parse-bmfont-ascii')\nvar parseXML = require('parse-bmfont-xml')\nvar readBinary = require('parse-bmfont-binary')\nvar isBinaryFormat = require('./lib/is-binary')\nvar xtend = require('xtend')\n\nvar xml2 = (function hasXML2() {\n  return self.XMLHttpRequest && \"withCredentials\" in new XMLHttpRequest\n})()\n\nmodule.exports = function(opt, cb) {\n  cb = typeof cb === 'function' ? cb : noop\n\n  if (typeof opt === 'string')\n    opt = { uri: opt }\n  else if (!opt)\n    opt = {}\n\n  var expectBinary = opt.binary\n  if (expectBinary)\n    opt = getBinaryOpts(opt)\n\n  xhr(opt, function(err, res, body) {\n    if (err)\n      return cb(err)\n    if (!/^2/.test(res.statusCode))\n      return cb(new Error('http status code: '+res.statusCode))\n    if (!body)\n      return cb(new Error('no body result'))\n\n    var binary = false \n\n    //if the response type is an array buffer,\n    //we need to convert it into a regular Buffer object\n    if (isArrayBuffer(body)) {\n      var array = new Uint8Array(body)\n      body = Buffer.from(array, 'binary')\n    }\n\n    //now check the string/Buffer response\n    //and see if it has a binary BMF header\n    if (isBinaryFormat(body)) {\n      binary = true\n      //if we have a string, turn it into a Buffer\n      if (typeof body === 'string') \n        body = Buffer.from(body, 'binary')\n    } \n\n    //we are not parsing a binary format, just ASCII/XML/etc\n    if (!binary) {\n      //might still be a buffer if responseType is 'arraybuffer'\n      if (Buffer.isBuffer(body))\n        body = body.toString(opt.encoding)\n      body = body.trim()\n    }\n\n    var result\n    try {\n      var type = res.headers['content-type']\n      if (binary)\n        result = readBinary(body)\n      else if (/json/.test(type) || body.charAt(0) === '{')\n        result = JSON.parse(body)\n      else if (/xml/.test(type)  || body.charAt(0) === '<')\n        result = parseXML(body)\n      else\n        result = parseASCII(body)\n    } catch (e) {\n      cb(new Error('error parsing font '+e.message))\n      cb = noop\n    }\n    cb(null, result)\n  })\n}\n\nfunction isArrayBuffer(arr) {\n  var str = Object.prototype.toString\n  return str.call(arr) === '[object ArrayBuffer]'\n}\n\nfunction getBinaryOpts(opt) {\n  //IE10+ and other modern browsers support array buffers\n  if (xml2)\n    return xtend(opt, { responseType: 'arraybuffer' })\n  \n  if (typeof self.XMLHttpRequest === 'undefined')\n    throw new Error('your browser does not support XHR loading')\n\n  //IE9 and XML1 browsers could still use an override\n  var req = new self.XMLHttpRequest()\n  req.overrideMimeType('text/plain; charset=x-user-defined')\n  return xtend({\n    xhr: req\n  }, opt)\n}\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIC,IAAI,GAAG,YAAU,CAAE,CAAvB;;AACA,IAAIC,UAAU,GAAGF,OAAO,CAAC,oBAAD,CAAxB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,kBAAD,CAAtB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,qBAAD,CAAxB;;AACA,IAAIK,cAAc,GAAGL,OAAO,CAAC,iBAAD,CAA5B;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAIO,IAAI,GAAI,SAASC,OAAT,GAAmB;EAC7B,OAAOC,IAAI,CAACC,cAAL,IAAuB,qBAAqB,IAAIA,cAAJ,EAAnD;AACD,CAFU,EAAX;;AAIAC,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAcC,EAAd,EAAkB;EACjCA,EAAE,GAAG,OAAOA,EAAP,KAAc,UAAd,GAA2BA,EAA3B,GAAgCb,IAArC;EAEA,IAAI,OAAOY,GAAP,KAAe,QAAnB,EACEA,GAAG,GAAG;IAAEE,GAAG,EAAEF;EAAP,CAAN,CADF,KAEK,IAAI,CAACA,GAAL,EACHA,GAAG,GAAG,EAAN;EAEF,IAAIG,YAAY,GAAGH,GAAG,CAACI,MAAvB;EACA,IAAID,YAAJ,EACEH,GAAG,GAAGK,aAAa,CAACL,GAAD,CAAnB;EAEFd,GAAG,CAACc,GAAD,EAAM,UAASM,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;IAChC,IAAIF,GAAJ,EACE,OAAOL,EAAE,CAACK,GAAD,CAAT;IACF,IAAI,CAAC,KAAKG,IAAL,CAAUF,GAAG,CAACG,UAAd,CAAL,EACE,OAAOT,EAAE,CAAC,IAAIU,KAAJ,CAAU,uBAAqBJ,GAAG,CAACG,UAAnC,CAAD,CAAT;IACF,IAAI,CAACF,IAAL,EACE,OAAOP,EAAE,CAAC,IAAIU,KAAJ,CAAU,gBAAV,CAAD,CAAT;IAEF,IAAIP,MAAM,GAAG,KAAb,CARgC,CAUhC;IACA;;IACA,IAAIQ,aAAa,CAACJ,IAAD,CAAjB,EAAyB;MACvB,IAAIK,KAAK,GAAG,IAAIC,UAAJ,CAAeN,IAAf,CAAZ;MACAA,IAAI,GAAGO,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmB,QAAnB,CAAP;IACD,CAf+B,CAiBhC;IACA;;;IACA,IAAIrB,cAAc,CAACgB,IAAD,CAAlB,EAA0B;MACxBJ,MAAM,GAAG,IAAT,CADwB,CAExB;;MACA,IAAI,OAAOI,IAAP,KAAgB,QAApB,EACEA,IAAI,GAAGO,MAAM,CAACC,IAAP,CAAYR,IAAZ,EAAkB,QAAlB,CAAP;IACH,CAxB+B,CA0BhC;;;IACA,IAAI,CAACJ,MAAL,EAAa;MACX;MACA,IAAIW,MAAM,CAACE,QAAP,CAAgBT,IAAhB,CAAJ,EACEA,IAAI,GAAGA,IAAI,CAACU,QAAL,CAAclB,GAAG,CAACmB,QAAlB,CAAP;MACFX,IAAI,GAAGA,IAAI,CAACY,IAAL,EAAP;IACD;;IAED,IAAIC,MAAJ;;IACA,IAAI;MACF,IAAIC,IAAI,GAAGf,GAAG,CAACgB,OAAJ,CAAY,cAAZ,CAAX;MACA,IAAInB,MAAJ,EACEiB,MAAM,GAAG9B,UAAU,CAACiB,IAAD,CAAnB,CADF,KAEK,IAAI,OAAOC,IAAP,CAAYa,IAAZ,KAAqBd,IAAI,CAACgB,MAAL,CAAY,CAAZ,MAAmB,GAA5C,EACHH,MAAM,GAAGI,IAAI,CAACC,KAAL,CAAWlB,IAAX,CAAT,CADG,KAEA,IAAI,MAAMC,IAAN,CAAWa,IAAX,KAAqBd,IAAI,CAACgB,MAAL,CAAY,CAAZ,MAAmB,GAA5C,EACHH,MAAM,GAAG/B,QAAQ,CAACkB,IAAD,CAAjB,CADG,KAGHa,MAAM,GAAGhC,UAAU,CAACmB,IAAD,CAAnB;IACH,CAVD,CAUE,OAAOmB,CAAP,EAAU;MACV1B,EAAE,CAAC,IAAIU,KAAJ,CAAU,wBAAsBgB,CAAC,CAACC,OAAlC,CAAD,CAAF;MACA3B,EAAE,GAAGb,IAAL;IACD;;IACDa,EAAE,CAAC,IAAD,EAAOoB,MAAP,CAAF;EACD,CAlDE,CAAH;AAmDD,CA/DD;;AAiEA,SAAST,aAAT,CAAuBiB,GAAvB,EAA4B;EAC1B,IAAIC,GAAG,GAAGC,MAAM,CAACC,SAAP,CAAiBd,QAA3B;EACA,OAAOY,GAAG,CAACG,IAAJ,CAASJ,GAAT,MAAkB,sBAAzB;AACD;;AAED,SAASxB,aAAT,CAAuBL,GAAvB,EAA4B;EAC1B;EACA,IAAIN,IAAJ,EACE,OAAOD,KAAK,CAACO,GAAD,EAAM;IAAEkC,YAAY,EAAE;EAAhB,CAAN,CAAZ;EAEF,IAAI,OAAOtC,IAAI,CAACC,cAAZ,KAA+B,WAAnC,EACE,MAAM,IAAIc,KAAJ,CAAU,2CAAV,CAAN,CANwB,CAQ1B;;EACA,IAAIwB,GAAG,GAAG,IAAIvC,IAAI,CAACC,cAAT,EAAV;EACAsC,GAAG,CAACC,gBAAJ,CAAqB,oCAArB;EACA,OAAO3C,KAAK,CAAC;IACXP,GAAG,EAAEiD;EADM,CAAD,EAETnC,GAFS,CAAZ;AAGD"},"metadata":{},"sourceType":"script"}