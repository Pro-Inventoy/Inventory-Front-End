{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _utils = require(\"@jimp/utils\");\n/**\n * Masks a source image on to this image using average pixel colour. A completely black pixel on the mask will turn a pixel in the image completely transparent.\n * @param {Jimp} src the source Jimp instance\n * @param {number} x the horizontal position to blit the image\n * @param {number} y the vertical position to blit the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n\n\nvar _default = function _default() {\n  return {\n    mask: function mask(src) {\n      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var cb = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (!(src instanceof this.constructor)) {\n        return _utils.throwError.call(this, 'The source must be a Jimp image', cb);\n      }\n\n      if (typeof x !== 'number' || typeof y !== 'number') {\n        return _utils.throwError.call(this, 'x and y must be numbers', cb);\n      } // round input\n\n\n      x = Math.round(x);\n      y = Math.round(y);\n      var w = this.bitmap.width;\n      var h = this.bitmap.height;\n      var baseImage = this;\n      src.scanQuiet(0, 0, src.bitmap.width, src.bitmap.height, function (sx, sy, idx) {\n        var destX = x + sx;\n        var destY = y + sy;\n\n        if (destX >= 0 && destY >= 0 && destX < w && destY < h) {\n          var dstIdx = baseImage.getPixelIndex(destX, destY);\n          var data = this.bitmap.data;\n          var avg = (data[idx + 0] + data[idx + 1] + data[idx + 2]) / 3;\n          baseImage.bitmap.data[dstIdx + 3] *= avg / 255;\n        }\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;;;;;;;;eAQe;EAAA,OAAO;IACpBA,IADoB,gBACfC,GADe,EACQ;MAAA,IAAlBC,CAAkB,uEAAd,CAAc;MAAA,IAAXC,CAAW,uEAAP,CAAO;MAAA,IAAJC,EAAI;;MAC1B,IAAI,EAAEH,GAAG,YAAY,KAAKI,WAAtB,CAAJ,EAAwC;QACtC,OAAOC,kBAAWC,IAAXD,CAAgB,IAAhBA,EAAsB,iCAAtBA,EAAyDF,EAAzDE,CAAP;MACD;;MAED,IAAI,OAAOJ,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;QAClD,OAAOG,kBAAWC,IAAXD,CAAgB,IAAhBA,EAAsB,yBAAtBA,EAAiDF,EAAjDE,CAAP;MANwB,EAS1B;;;MACAJ,CAAC,GAAGM,IAAI,CAACC,KAALD,CAAWN,CAAXM,CAAJN;MACAC,CAAC,GAAGK,IAAI,CAACC,KAALD,CAAWL,CAAXK,CAAJL;MAEA,IAAMO,CAAC,GAAG,KAAKC,MAAL,CAAYC,KAAtB;MACA,IAAMC,CAAC,GAAG,KAAKF,MAAL,CAAYG,MAAtB;MACA,IAAMC,SAAS,GAAG,IAAlB;MAEAd,GAAG,CAACe,SAAJf,CAAc,CAAdA,EAAiB,CAAjBA,EAAoBA,GAAG,CAACU,MAAJV,CAAWW,KAA/BX,EAAsCA,GAAG,CAACU,MAAJV,CAAWa,MAAjDb,EAAyD,UACvDgB,EADuD,EAEvDC,EAFuD,EAGvDC,GAHuD,EAIvD;QACA,IAAMC,KAAK,GAAGlB,CAAC,GAAGe,EAAlB;QACA,IAAMI,KAAK,GAAGlB,CAAC,GAAGe,EAAlB;;QAEA,IAAIE,KAAK,IAAI,CAATA,IAAcC,KAAK,IAAI,CAAvBD,IAA4BA,KAAK,GAAGV,CAApCU,IAAyCC,KAAK,GAAGR,CAArD,EAAwD;UACtD,IAAMS,MAAM,GAAGP,SAAS,CAACQ,aAAVR,CAAwBK,KAAxBL,EAA+BM,KAA/BN,CAAf;UADsD,IAE9CS,IAF8C,GAErC,KAAKb,MAAL,CAATa,IAF8C;UAGtD,IAAMC,GAAG,GAAG,CAACD,IAAI,CAACL,GAAG,GAAG,CAAP,CAAJK,GAAgBA,IAAI,CAACL,GAAG,GAAG,CAAP,CAApBK,GAAgCA,IAAI,CAACL,GAAG,GAAG,CAAP,CAArC,IAAkD,CAA9D;UAEAJ,SAAS,CAACJ,MAAVI,CAAiBS,IAAjBT,CAAsBO,MAAM,GAAG,CAA/BP,KAAqCU,GAAG,GAAG,GAA3CV;QACD;MAdH;;MAiBA,IAAI,0BAAcX,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACG,IAAHH,CAAQ,IAARA,EAAc,IAAdA,EAAoB,IAApBA;MACD;;MAED,OAAO,IAAP;IACD;EAxCmB,CAAP","names":["mask","src","x","y","cb","constructor","throwError","call","Math","round","w","bitmap","width","h","height","baseImage","scanQuiet","sx","sy","idx","destX","destY","dstIdx","getPixelIndex","data","avg"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\@jimp\\plugin-mask\\src\\index.js"],"sourcesContent":["import { isNodePattern, throwError } from '@jimp/utils';\n\n/**\n * Masks a source image on to this image using average pixel colour. A completely black pixel on the mask will turn a pixel in the image completely transparent.\n * @param {Jimp} src the source Jimp instance\n * @param {number} x the horizontal position to blit the image\n * @param {number} y the vertical position to blit the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  mask(src, x = 0, y = 0, cb) {\n    if (!(src instanceof this.constructor)) {\n      return throwError.call(this, 'The source must be a Jimp image', cb);\n    }\n\n    if (typeof x !== 'number' || typeof y !== 'number') {\n      return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    const w = this.bitmap.width;\n    const h = this.bitmap.height;\n    const baseImage = this;\n\n    src.scanQuiet(0, 0, src.bitmap.width, src.bitmap.height, function(\n      sx,\n      sy,\n      idx\n    ) {\n      const destX = x + sx;\n      const destY = y + sy;\n\n      if (destX >= 0 && destY >= 0 && destX < w && destY < h) {\n        const dstIdx = baseImage.getPixelIndex(destX, destY);\n        const { data } = this.bitmap;\n        const avg = (data[idx + 0] + data[idx + 1] + data[idx + 2]) / 3;\n\n        baseImage.bitmap.data[dstIdx + 3] *= avg / 255;\n      }\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}