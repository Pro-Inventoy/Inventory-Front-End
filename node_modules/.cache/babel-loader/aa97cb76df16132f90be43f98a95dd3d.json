{"ast":null,"code":"import { PermissionStatus, createPermissionHook, UnavailabilityError } from 'expo-modules-core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\nconst {\n  BarCodeType,\n  Type\n} = ExpoBarCodeScannerModule;\nconst EVENT_THROTTLE_MS = 500;\nexport class BarCodeScanner extends React.Component {\n  lastEvents = {};\n  lastEventsTimes = {};\n  static Constants = {\n    BarCodeType,\n    Type\n  };\n  static ConversionTables = {\n    type: Type\n  };\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType)\n  }; // @needsAudit\n\n  /**\n   * Checks user's permissions for accessing the camera.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n\n  static async getPermissionsAsync() {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  } // @needsAudit\n\n  /**\n   * Asks the user to grant permissions for accessing the camera.\n   *\n   * On iOS this will require apps to specify the `NSCameraUsageDescription` entry in the `Info.plist`.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n\n\n  static async requestPermissionsAsync() {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  } // @needsAudit\n\n  /**\n   * Check or request permissions for the barcode scanner.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [status, requestPermission] = BarCodeScanner.usePermissions();\n   * ```\n   */\n\n\n  static usePermissions = createPermissionHook({\n    getMethod: BarCodeScanner.getPermissionsAsync,\n    requestMethod: BarCodeScanner.requestPermissionsAsync\n  }); // @needsAudit\n\n  /**\n   * Scan bar codes from the image given by the URL.\n   * @param url URL to get the image from.\n   * @param barCodeTypes An array of bar code types. Defaults to all supported bar code types on\n   * the platform.\n   * > __Note:__ Only QR codes are supported on iOS.\n   * @return A possibly empty array of objects of the `BarCodeScannerResult` shape, where the type\n   * refers to the bar code type that was scanned and the data is the information encoded in the bar\n   * code.\n   */\n\n  static async scanFromURLAsync(url) {\n    let barCodeTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.values(BarCodeType);\n\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      } // on iOS use only supported QR type\n\n\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    } // On other platforms, if barCodeTypes is not provided, use all available types\n\n\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const {\n      onBarCodeScanned\n    } = this.props;\n    return React.createElement(ExpoBarCodeScannerView, { ...nativeProps,\n      onBarCodeScanned: this.onObjectDetected(onBarCodeScanned)\n    });\n  }\n  /**\n   * @hidden\n   */\n\n\n  onObjectDetected = callback => _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      type\n    } = nativeEvent;\n\n    if (this.lastEvents[type] && this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === this.lastEvents[type] && Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {\n      return;\n    }\n\n    if (callback) {\n      callback(nativeEvent);\n      this.lastEventsTimes[type] = new Date();\n      this.lastEvents[type] = JSON.stringify(nativeEvent);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n  convertNativeProps(props) {\n    const nativeProps = {};\n\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n\n    return nativeProps;\n  }\n\n}\nexport { PermissionStatus };\nexport const {\n  Constants,\n  getPermissionsAsync,\n  requestPermissionsAsync,\n  usePermissions,\n  scanFromURLAsync\n} = BarCodeScanner;","map":{"version":3,"mappings":"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","names":["PermissionStatus","createPermissionHook","UnavailabilityError","React","Platform","ExpoBarCodeScannerModule","ExpoBarCodeScannerView","BarCodeType","Type","EVENT_THROTTLE_MS","BarCodeScanner","Component","lastEvents","lastEventsTimes","Constants","ConversionTables","type","defaultProps","back","barCodeTypes","Object","values","getPermissionsAsync","requestPermissionsAsync","usePermissions","getMethod","requestMethod","scanFromURLAsync","url","Array","isArray","length","Error","OS","includes","qr","render","nativeProps","convertNativeProps","props","onBarCodeScanned","onObjectDetected","callback","nativeEvent","JSON","stringify","Date","now","key","value","entries"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\expo-barcode-scanner\\src\\BarCodeScanner.tsx"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport * as React from 'react';\nimport { Platform, ViewProps } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\n// @needsAudit\n/**\n * Those coordinates are represented in the coordinate space of the barcode source (e.g. when you\n * are using the barcode scanner view, these values are adjusted to the dimensions of the view).\n */\nexport type BarCodePoint = {\n  /**\n   * The `x` coordinate value.\n   */\n  x: number;\n  /**\n   * The `y` coordinate value.\n   */\n  y: number;\n};\n\n// @needsAudit\nexport type BarCodeSize = {\n  /**\n   * The height value.\n   */\n  height: number;\n  /**\n   * The width value.\n   */\n  width: number;\n};\n\n// @needsAudit\nexport type BarCodeBounds = {\n  /**\n   * The origin point of the bounding box.\n   */\n  origin: BarCodePoint;\n  /**\n   * The size of the bounding box.\n   */\n  size: BarCodeSize;\n};\n\n// @needsAudit\n/**\n * > __Note:__ `bounds` and `cornerPoints` are not always available. On iOS, for `code39` and `pdf417`\n * > you don't get those values. Moreover, on iOS, those values don't have to bounds the whole barcode.\n * > For some types, they will represent the area used by the scanner.\n */\nexport type BarCodeScannerResult = {\n  /**\n   * The barcode type.\n   */\n  type: string;\n  /**\n   * The information encoded in the bar code.\n   */\n  data: string;\n  /**\n   * The [BarCodeBounds](#barcodebounds) object.\n   */\n  bounds?: BarCodeBounds;\n  /**\n   * Corner points of the bounding box.\n   */\n  cornerPoints?: BarCodePoint[];\n};\n\n// @docsMissing\nexport type BarCodeEvent = BarCodeScannerResult & {\n  target?: number;\n};\n\n// @docsMissing\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\n// @docsMissing\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\n// @needsAudit\nexport type BarCodeScannerProps = ViewProps & {\n  /**\n   * Camera facing. Use one of `BarCodeScanner.Constants.Type`. Use either `Type.front` or `Type.back`.\n   * Same as `Camera.Constants.Type`.\n   * @default Type.back\n   */\n  type?: 'front' | 'back' | number;\n  /**\n   * An array of bar code types. Usage: `BarCodeScanner.Constants.BarCodeType.<codeType>` where\n   * `codeType` is one of these [listed above](#supported-formats). Defaults to all supported bar\n   * code types. It is recommended to provide only the bar code formats you expect to scan to\n   * minimize battery usage.\n   *\n   * For example: `barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}`.\n   */\n  barCodeTypes?: string[];\n  /**\n   * A callback that is invoked when a bar code has been successfully scanned. The callback is\n   * provided with an [BarCodeScannerResult](#barcodescannerresult).\n   * > __Note:__ Passing `undefined` to the `onBarCodeScanned` prop will result in no scanning. This\n   * > can be used to effectively \"pause\" the scanner so that it doesn't continually scan even after\n   * > data has been retrieved.\n   */\n  onBarCodeScanned?: BarCodeScannedCallback;\n};\n\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing the camera.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for accessing the camera.\n   *\n   * On iOS this will require apps to specify the `NSCameraUsageDescription` entry in the `Info.plist`.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Check or request permissions for the barcode scanner.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [status, requestPermission] = BarCodeScanner.usePermissions();\n   * ```\n   */\n  static usePermissions = createPermissionHook({\n    getMethod: BarCodeScanner.getPermissionsAsync,\n    requestMethod: BarCodeScanner.requestPermissionsAsync,\n  });\n\n  // @needsAudit\n  /**\n   * Scan bar codes from the image given by the URL.\n   * @param url URL to get the image from.\n   * @param barCodeTypes An array of bar code types. Defaults to all supported bar code types on\n   * the platform.\n   * > __Note:__ Only QR codes are supported on iOS.\n   * @return A possibly empty array of objects of the `BarCodeScannerResult` shape, where the type\n   * refers to the bar code type that was scanned and the data is the information encoded in the bar\n   * code.\n   */\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<BarCodeScannerResult[]> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  onObjectDetected =\n    (callback?: BarCodeScannedCallback) =>\n    ({ nativeEvent }: BarCodeEventCallbackArguments) => {\n      const { type } = nativeEvent;\n      if (\n        this.lastEvents[type] &&\n        this.lastEventsTimes[type] &&\n        JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n        Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n      ) {\n        return;\n      }\n\n      if (callback) {\n        callback(nativeEvent);\n        this.lastEventsTimes[type] = new Date();\n        this.lastEvents[type] = JSON.stringify(nativeEvent);\n      }\n    };\n\n  /**\n   * @hidden\n   */\n  convertNativeProps(props: BarCodeScannerProps) {\n    const nativeProps: BarCodeScannerProps = {};\n\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n\n    return nativeProps;\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\nexport const {\n  Constants,\n  getPermissionsAsync,\n  requestPermissionsAsync,\n  usePermissions,\n  scanFromURLAsync,\n} = BarCodeScanner;\n"]},"metadata":{},"sourceType":"module"}