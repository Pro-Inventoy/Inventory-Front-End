{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _utils = require(\"@jimp/utils\");\n/**\n * Creates a circle out of an image.\n * @param {object} options (optional) r: radius of effect\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n\n\nvar _default = function _default() {\n  return {\n    fisheye: function fisheye() {\n      var _this = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        r: 2.5\n      };\n      var cb = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (typeof options === 'function') {\n        cb = options;\n        options = {\n          r: 2.5\n        };\n      }\n\n      var source = this.cloneQuiet();\n      var _source$bitmap = source.bitmap,\n          width = _source$bitmap.width,\n          height = _source$bitmap.height;\n      source.scanQuiet(0, 0, width, height, function (x, y) {\n        var hx = x / width;\n        var hy = y / height;\n        var r = Math.sqrt(Math.pow(hx - 0.5, 2) + Math.pow(hy - 0.5, 2));\n        var rn = 2 * Math.pow(r, options.r);\n        var cosA = (hx - 0.5) / r;\n        var sinA = (hy - 0.5) / r;\n        var newX = Math.round((rn * cosA + 0.5) * width);\n        var newY = Math.round((rn * sinA + 0.5) * height);\n        var color = source.getPixelColor(newX, newY);\n\n        _this.setPixelColor(color, x, y);\n      });\n      /* Set center pixel color, otherwise it will be transparent */\n\n      this.setPixelColor(source.getPixelColor(width / 2, height / 2), width / 2, height / 2);\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;;;;;;eAMe;EAAA,OAAO;IACpBA,OADoB,qBACc;MAAA;;MAAA,IAA1BC,OAA0B,uEAAhB;QAAEC,CAAC,EAAE;MAAL,CAAgB;MAAA,IAAJC,EAAI;;MAChC,IAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;QACjCE,EAAE,GAAGF,OAALE;QACAF,OAAO,GAAG;UAAEC,CAAC,EAAE;QAAL,CAAVD;MACD;;MAED,IAAMG,MAAM,GAAG,KAAKC,UAAL,EAAf;MANgC,qBAOND,MAAM,CAACE,MAPD;MAAA,IAOxBC,KAPwB,kBAOxBA,KAPwB;MAAA,IAOjBC,MAPiB,kBAOjBA,MAPiB;MAShCJ,MAAM,CAACK,SAAPL,CAAiB,CAAjBA,EAAoB,CAApBA,EAAuBG,KAAvBH,EAA8BI,MAA9BJ,EAAsC,UAACM,CAAD,EAAIC,CAAJ,EAAU;QAC9C,IAAMC,EAAE,GAAGF,CAAC,GAAGH,KAAf;QACA,IAAMM,EAAE,GAAGF,CAAC,GAAGH,MAAf;QACA,IAAMN,CAAC,GAAGY,IAAI,CAACC,IAALD,CAAUA,IAAI,CAACE,GAALF,CAASF,EAAE,GAAG,GAAdE,EAAmB,CAAnBA,IAAwBA,IAAI,CAACE,GAALF,CAASD,EAAE,GAAG,GAAdC,EAAmB,CAAnBA,CAAlCA,CAAV;QACA,IAAMG,EAAE,GAAG,IAAIH,IAAI,CAACE,GAALF,CAASZ,CAATY,EAAYb,OAAO,CAACC,CAApBY,CAAf;QACA,IAAMI,IAAI,GAAG,CAACN,EAAE,GAAG,GAAN,IAAaV,CAA1B;QACA,IAAMiB,IAAI,GAAG,CAACN,EAAE,GAAG,GAAN,IAAaX,CAA1B;QACA,IAAMkB,IAAI,GAAGN,IAAI,CAACO,KAALP,CAAW,CAACG,EAAE,GAAGC,IAALD,GAAY,GAAb,IAAoBV,KAA/BO,CAAb;QACA,IAAMQ,IAAI,GAAGR,IAAI,CAACO,KAALP,CAAW,CAACG,EAAE,GAAGE,IAALF,GAAY,GAAb,IAAoBT,MAA/BM,CAAb;QACA,IAAMS,KAAK,GAAGnB,MAAM,CAACoB,aAAPpB,CAAqBgB,IAArBhB,EAA2BkB,IAA3BlB,CAAd;;QAEAqB,KAAI,CAACC,aAAL,CAAmBH,KAAnB,EAA0Bb,CAA1B,EAA6BC,CAA7B;MAXF;MAcA;;MACA,KAAKe,aAAL,CACEtB,MAAM,CAACoB,aAAPpB,CAAqBG,KAAK,GAAG,CAA7BH,EAAgCI,MAAM,GAAG,CAAzCJ,CADF,EAEEG,KAAK,GAAG,CAFV,EAGEC,MAAM,GAAG,CAHX;;MAMA,IAAI,0BAAcL,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACwB,IAAHxB,CAAQ,IAARA,EAAc,IAAdA,EAAoB,IAApBA;MACD;;MAED,OAAO,IAAP;IACD;EApCmB,CAAP","names":["fisheye","options","r","cb","source","cloneQuiet","bitmap","width","height","scanQuiet","x","y","hx","hy","Math","sqrt","pow","rn","cosA","sinA","newX","round","newY","color","getPixelColor","_this","setPixelColor","call"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\@jimp\\plugin-fisheye\\src\\index.js"],"sourcesContent":["import { isNodePattern } from '@jimp/utils';\n\n/**\n * Creates a circle out of an image.\n * @param {object} options (optional) r: radius of effect\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  fisheye(options = { r: 2.5 }, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = { r: 2.5 };\n    }\n\n    const source = this.cloneQuiet();\n    const { width, height } = source.bitmap;\n\n    source.scanQuiet(0, 0, width, height, (x, y) => {\n      const hx = x / width;\n      const hy = y / height;\n      const r = Math.sqrt(Math.pow(hx - 0.5, 2) + Math.pow(hy - 0.5, 2));\n      const rn = 2 * Math.pow(r, options.r);\n      const cosA = (hx - 0.5) / r;\n      const sinA = (hy - 0.5) / r;\n      const newX = Math.round((rn * cosA + 0.5) * width);\n      const newY = Math.round((rn * sinA + 0.5) * height);\n      const color = source.getPixelColor(newX, newY);\n\n      this.setPixelColor(color, x, y);\n    });\n\n    /* Set center pixel color, otherwise it will be transparent */\n    this.setPixelColor(\n      source.getPixelColor(width / 2, height / 2),\n      width / 2,\n      height / 2\n    );\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}