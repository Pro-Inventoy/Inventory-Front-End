{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _utils = require(\"@jimp/utils\");\n/**\n * Displaces the image based on the provided displacement map\n * @param {object} map the source Jimp instance\n * @param {number} offset the maximum displacement value\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n\n\nvar _default = function _default() {\n  return {\n    displace: function displace(map, offset, cb) {\n      if ((0, _typeof2[\"default\"])(map) !== 'object' || map.constructor !== this.constructor) {\n        return _utils.throwError.call(this, 'The source must be a Jimp image', cb);\n      }\n\n      if (typeof offset !== 'number') {\n        return _utils.throwError.call(this, 'factor must be a number', cb);\n      }\n\n      var source = this.cloneQuiet();\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        var displacement = map.bitmap.data[idx] / 256 * offset;\n        displacement = Math.round(displacement);\n        var ids = this.getPixelIndex(x + displacement, y);\n        this.bitmap.data[ids] = source.bitmap.data[idx];\n        this.bitmap.data[ids + 1] = source.bitmap.data[idx + 1];\n        this.bitmap.data[ids + 2] = source.bitmap.data[idx + 2];\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AAEA;;;;;;;;;eAOe;EAAA,OAAO;IACpBA,QADoB,oBACXC,GADW,EACNC,MADM,EACEC,EADF,EACM;MACxB,IAAI,yBAAOF,GAAP,MAAe,QAAf,IAA2BA,GAAG,CAACG,WAAJH,KAAoB,KAAKG,WAAxD,EAAqE;QACnE,OAAOC,kBAAWC,IAAXD,CAAgB,IAAhBA,EAAsB,iCAAtBA,EAAyDF,EAAzDE,CAAP;MACD;;MAED,IAAI,OAAOH,MAAP,KAAkB,QAAtB,EAAgC;QAC9B,OAAOG,kBAAWC,IAAXD,CAAgB,IAAhBA,EAAsB,yBAAtBA,EAAiDF,EAAjDE,CAAP;MACD;;MAED,IAAME,MAAM,GAAG,KAAKC,UAAL,EAAf;MACA,KAAKC,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAAKC,MAAL,CAAYC,KAAjC,EAAwC,KAAKD,MAAL,CAAYE,MAApD,EAA4D,UAC1DC,CAD0D,EAE1DC,CAF0D,EAG1DC,GAH0D,EAI1D;QACA,IAAIC,YAAY,GAAIf,GAAG,CAACS,MAAJT,CAAWgB,IAAXhB,CAAgBc,GAAhBd,IAAuB,GAAvBA,GAA8BC,MAAlD;QACAc,YAAY,GAAGE,IAAI,CAACC,KAALD,CAAWF,YAAXE,CAAfF;QAEA,IAAMI,GAAG,GAAG,KAAKC,aAAL,CAAmBR,CAAC,GAAGG,YAAvB,EAAqCF,CAArC,CAAZ;QACA,KAAKJ,MAAL,CAAYO,IAAZ,CAAiBG,GAAjB,IAAwBb,MAAM,CAACG,MAAPH,CAAcU,IAAdV,CAAmBQ,GAAnBR,CAAxB;QACA,KAAKG,MAAL,CAAYO,IAAZ,CAAiBG,GAAG,GAAG,CAAvB,IAA4Bb,MAAM,CAACG,MAAPH,CAAcU,IAAdV,CAAmBQ,GAAG,GAAG,CAAzBR,CAA5B;QACA,KAAKG,MAAL,CAAYO,IAAZ,CAAiBG,GAAG,GAAG,CAAvB,IAA4Bb,MAAM,CAACG,MAAPH,CAAcU,IAAdV,CAAmBQ,GAAG,GAAG,CAAzBR,CAA5B;MAXF;;MAcA,IAAI,0BAAcJ,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACG,IAAHH,CAAQ,IAARA,EAAc,IAAdA,EAAoB,IAApBA;MACD;;MAED,OAAO,IAAP;IACD;EA9BmB,CAAP","names":["displace","map","offset","cb","constructor","throwError","call","source","cloneQuiet","scanQuiet","bitmap","width","height","x","y","idx","displacement","data","Math","round","ids","getPixelIndex"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\@jimp\\plugin-displace\\src\\index.js"],"sourcesContent":["import { isNodePattern, throwError } from '@jimp/utils';\n\n/**\n * Displaces the image based on the provided displacement map\n * @param {object} map the source Jimp instance\n * @param {number} offset the maximum displacement value\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  displace(map, offset, cb) {\n    if (typeof map !== 'object' || map.constructor !== this.constructor) {\n      return throwError.call(this, 'The source must be a Jimp image', cb);\n    }\n\n    if (typeof offset !== 'number') {\n      return throwError.call(this, 'factor must be a number', cb);\n    }\n\n    const source = this.cloneQuiet();\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      let displacement = (map.bitmap.data[idx] / 256) * offset;\n      displacement = Math.round(displacement);\n\n      const ids = this.getPixelIndex(x + displacement, y);\n      this.bitmap.data[ids] = source.bitmap.data[idx];\n      this.bitmap.data[ids + 1] = source.bitmap.data[idx + 1];\n      this.bitmap.data[ids + 2] = source.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}