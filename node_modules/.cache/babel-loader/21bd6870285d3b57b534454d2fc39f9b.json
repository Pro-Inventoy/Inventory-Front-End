{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { signIn as signInService, signUp as signUpService, signOut as signOutService, uploadAvatar, upsertProfile } from '../services/user-service.js';\nimport { UserStateContext, UserActionContext, UserProvider } from '../context/UserContext.jsx';\nexport function useStatus() {\n  _s();\n\n  const {\n    user,\n    profile\n  } = useContext(UserStateContext);\n  return {\n    user,\n    profile\n  };\n}\n\n_s(useStatus, \"1V8hqdvDlFQEfymqml8VHuQse/o=\");\n\nexport function useAuth() {\n  _s2();\n\n  let setUser = UserProvider.setUser;\n  setUser = useContext(UserActionContext);\n\n  const createAction = service => async credentials => {\n    const {\n      user,\n      error\n    } = await service(credentials);\n\n    if (error) {\n      console.log(error.message);\n    }\n\n    if (user) {\n      setUser(user);\n    }\n  };\n\n  const signIn = createAction(signInService);\n  const signUp = createAction(signUpService);\n  const signOut = createAction(signOutService);\n  return {\n    signIn,\n    signUp,\n    signOut\n  };\n}\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function useProfile() {\n  _s3();\n\n  const {\n    user,\n    profile\n  } = useContext(UserStateContext);\n  const {\n    setProfile\n  } = useContext(UserActionContext);\n\n  const updateProfile = async _ref => {\n    let {\n      avatar,\n      ...profile\n    } = _ref;\n    const {\n      url,\n      error\n    } = await uploadAvatar(user.id, avatar);\n\n    if (error) {\n      console.log(error.message);\n    }\n\n    if (url) {\n      const {\n        data,\n        error\n      } = await upsertProfile({ ...profile,\n        avatar: url\n      });\n\n      if (error) {\n        console.log(error.message);\n      }\n\n      if (data) {\n        setProfile(data);\n        console.log(`Profile updated for \"${data.username}\"`);\n      }\n    }\n  };\n\n  return [profile, updateProfile];\n}\n\n_s3(useProfile, \"3iPRWz7An7zlfXJsj6osWuwu6zg=\");","map":{"version":3,"names":["useContext","signIn","signInService","signUp","signUpService","signOut","signOutService","uploadAvatar","upsertProfile","UserStateContext","UserActionContext","UserProvider","useStatus","user","profile","useAuth","setUser","createAction","service","credentials","error","console","log","message","useProfile","setProfile","updateProfile","avatar","url","id","data","username"],"sources":["C:/Users/khaym/Desktop/inventoy-front/src/state/hooks/userAuth.js"],"sourcesContent":["import { useContext } from 'react';\r\nimport {\r\n  signIn as signInService,\r\n  signUp as signUpService,\r\n  signOut as signOutService,\r\n  uploadAvatar,\r\n  upsertProfile,\r\n} from '../services/user-service.js';\r\nimport {\r\n  UserStateContext,\r\n  UserActionContext,\r\n  UserProvider,\r\n} from '../context/UserContext.jsx';\r\n\r\nexport function useStatus() {\r\n  const { user, profile } = useContext(UserStateContext);\r\n\r\n  return { user, profile };\r\n}\r\n\r\nexport function useAuth() {\r\n  let setUser = UserProvider.setUser\r\n  setUser  = useContext(UserActionContext);\r\n\r\n  const createAction = (service) => async (credentials) => {\r\n    const { user, error } = await service(credentials);\r\n\r\n    if (error) {\r\n      console.log(error.message);\r\n    }\r\n    if (user) {\r\n      setUser(user);\r\n    }\r\n  };\r\n\r\n  const signIn = createAction(signInService);\r\n  const signUp = createAction(signUpService);\r\n  const signOut = createAction(signOutService);\r\n\r\n  return {\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n  };\r\n}\r\n\r\nexport function useProfile() {\r\n  const { user, profile } = useContext(UserStateContext);\r\n  const { setProfile } = useContext(UserActionContext);\r\n\r\n  const updateProfile = async ({ avatar, ...profile }) => {\r\n    const { url, error } = await uploadAvatar(user.id, avatar);\r\n    if (error) {\r\n      console.log(error.message);\r\n    }\r\n    if (url) {\r\n      const { data, error } = await upsertProfile({\r\n        ...profile,\r\n        avatar: url,\r\n      });\r\n\r\n      if (error) {\r\n        console.log(error.message);\r\n      }\r\n      if (data) {\r\n        setProfile(data);\r\n        console.log(`Profile updated for \"${data.username}\"`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return [profile, updateProfile];\r\n}\r\n"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SACEC,MAAM,IAAIC,aADZ,EAEEC,MAAM,IAAIC,aAFZ,EAGEC,OAAO,IAAIC,cAHb,EAIEC,YAJF,EAKEC,aALF,QAMO,6BANP;AAOA,SACEC,gBADF,EAEEC,iBAFF,EAGEC,YAHF,QAIO,4BAJP;AAMA,OAAO,SAASC,SAAT,GAAqB;EAAA;;EAC1B,MAAM;IAAEC,IAAF;IAAQC;EAAR,IAAoBd,UAAU,CAACS,gBAAD,CAApC;EAEA,OAAO;IAAEI,IAAF;IAAQC;EAAR,CAAP;AACD;;GAJeF,S;;AAMhB,OAAO,SAASG,OAAT,GAAmB;EAAA;;EACxB,IAAIC,OAAO,GAAGL,YAAY,CAACK,OAA3B;EACAA,OAAO,GAAIhB,UAAU,CAACU,iBAAD,CAArB;;EAEA,MAAMO,YAAY,GAAIC,OAAD,IAAa,MAAOC,WAAP,IAAuB;IACvD,MAAM;MAAEN,IAAF;MAAQO;IAAR,IAAkB,MAAMF,OAAO,CAACC,WAAD,CAArC;;IAEA,IAAIC,KAAJ,EAAW;MACTC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;IACD;;IACD,IAAIV,IAAJ,EAAU;MACRG,OAAO,CAACH,IAAD,CAAP;IACD;EACF,CATD;;EAWA,MAAMZ,MAAM,GAAGgB,YAAY,CAACf,aAAD,CAA3B;EACA,MAAMC,MAAM,GAAGc,YAAY,CAACb,aAAD,CAA3B;EACA,MAAMC,OAAO,GAAGY,YAAY,CAACX,cAAD,CAA5B;EAEA,OAAO;IACLL,MADK;IAELE,MAFK;IAGLE;EAHK,CAAP;AAKD;;IAxBeU,O;;AA0BhB,OAAO,SAASS,UAAT,GAAsB;EAAA;;EAC3B,MAAM;IAAEX,IAAF;IAAQC;EAAR,IAAoBd,UAAU,CAACS,gBAAD,CAApC;EACA,MAAM;IAAEgB;EAAF,IAAiBzB,UAAU,CAACU,iBAAD,CAAjC;;EAEA,MAAMgB,aAAa,GAAG,cAAkC;IAAA,IAA3B;MAAEC,MAAF;MAAU,GAAGb;IAAb,CAA2B;IACtD,MAAM;MAAEc,GAAF;MAAOR;IAAP,IAAiB,MAAMb,YAAY,CAACM,IAAI,CAACgB,EAAN,EAAUF,MAAV,CAAzC;;IACA,IAAIP,KAAJ,EAAW;MACTC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;IACD;;IACD,IAAIK,GAAJ,EAAS;MACP,MAAM;QAAEE,IAAF;QAAQV;MAAR,IAAkB,MAAMZ,aAAa,CAAC,EAC1C,GAAGM,OADuC;QAE1Ca,MAAM,EAAEC;MAFkC,CAAD,CAA3C;;MAKA,IAAIR,KAAJ,EAAW;QACTC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;MACD;;MACD,IAAIO,IAAJ,EAAU;QACRL,UAAU,CAACK,IAAD,CAAV;QACAT,OAAO,CAACC,GAAR,CAAa,wBAAuBQ,IAAI,CAACC,QAAS,GAAlD;MACD;IACF;EACF,CAnBD;;EAqBA,OAAO,CAACjB,OAAD,EAAUY,aAAV,CAAP;AACD;;IA1BeF,U"},"metadata":{},"sourceType":"module"}