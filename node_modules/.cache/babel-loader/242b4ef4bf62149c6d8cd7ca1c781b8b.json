{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react';\nimport { ItemContext } from '../context/inventoryContext.jsx';\nimport { getItems, addItem, updateItem, removeItem, getCategories } from '../services/inventory-service.js';\nexport function useItems() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [items, setItems] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n\n    const fetch = async () => {\n      const {\n        data,\n        error\n      } = await getItems();\n      if (ignore) return;\n\n      if (error) {\n        setError(error);\n      }\n\n      if (data) {\n        setItems(data);\n      }\n    };\n\n    fetch();\n    return () => ignore = true;\n  }, []);\n  return {\n    items,\n    error\n  };\n}\n\n_s(useItems, \"LgucePTD9YAAVXYQNIn4jcl4Ppg=\");\n\nexport function useCategories() {\n  _s2();\n\n  const [error, setError] = useState(null);\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    let ignore = false;\n\n    const fetch = async () => {\n      const {\n        data,\n        error\n      } = await getCategories();\n      if (ignore) return;\n\n      if (error) {\n        setError(error);\n      }\n\n      if (data) {\n        setCategories(data);\n      }\n    };\n\n    fetch();\n    return () => ignore = true;\n  }, []);\n  return categories;\n}\n\n_s2(useCategories, \"TsKa0/jNg/3PkLXbJ7YSJCzVhvo=\");\n\nfunction createDispatchActions(dispatch) {\n  return function createAction(_ref) {\n    let {\n      service,\n      type,\n      success\n    } = _ref;\n    return async function () {\n      const {\n        data,\n        error\n      } = await service(...arguments);\n      if (error) console.log(error.message);\n\n      if (data) {\n        dispatch({\n          type,\n          payload: data\n        });\n        const successMessage = success(data);\n        console.log(successMessage);\n      }\n    };\n  };\n}\n\nexport function useItemActions() {\n  _s3();\n\n  const {\n    itemDispatch\n  } = useContext(ItemContext);\n  const createAction = createDispatchActions(itemDispatch);\n  const add = createAction({\n    service: addItem,\n    type: 'add',\n    success: data => `Added ${data.itemname}`\n  });\n  const update = createAction({\n    service: updateItem,\n    type: 'update',\n    success: data => `Updated ${data.itemname}`\n  });\n  const remove = createAction({\n    service: removeItem,\n    type: 'remove',\n    success: data => `Removed ${data.itemname}`\n  });\n  return {\n    add,\n    update,\n    remove\n  };\n}\n\n_s3(useItemActions, \"edSerOIbfqRDRQ4cH1JoqEsNZwE=\");","map":{"version":3,"names":["useContext","useEffect","useState","ItemContext","getItems","addItem","updateItem","removeItem","getCategories","useItems","error","setError","items","setItems","ignore","fetch","data","useCategories","categories","setCategories","createDispatchActions","dispatch","createAction","service","type","success","console","log","message","payload","successMessage","useItemActions","itemDispatch","add","itemname","update","remove"],"sources":["C:/Users/khaym/Desktop/finalproject/Inventory-Front-End/src/state/hooks/inventory.js"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\r\nimport { ItemContext } from '../context/inventoryContext.jsx';\r\nimport {\r\n  getItems,\r\n  addItem,\r\n  updateItem,\r\n  removeItem,\r\n  getCategories,\r\n} from '../services/inventory-service.js';\r\n\r\nexport function useItems() {\r\n  const [error, setError] = useState(null);\r\n  const [ items, setItems ] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let ignore = false;\r\n\r\n    const fetch = async () => {\r\n      const { data, error } = await getItems();\r\n      if (ignore) return;\r\n\r\n      if (error) {\r\n        setError(error);\r\n      }\r\n      if (data) {\r\n        setItems(data);\r\n      }\r\n    };\r\n\r\n    fetch();\r\n    return () => (ignore = true);\r\n  }, []);\r\n\r\n  return { items, error };\r\n}\r\n\r\nexport function useCategories() {\r\n  const [error, setError] = useState(null);\r\n  const [ categories, setCategories ] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let ignore = false;\r\n\r\n    const fetch = async () => {\r\n      const { data, error } = await getCategories();\r\n      if (ignore) return;\r\n\r\n      if (error) {\r\n        setError(error);\r\n      }\r\n      if (data) {\r\n        setCategories(data);\r\n      }\r\n    };\r\n\r\n    fetch();\r\n    return () => (ignore = true);\r\n  }, []);\r\n  return categories;\r\n}\r\n\r\nfunction createDispatchActions(dispatch) {\r\n  return function createAction({ service, type, success }) {\r\n    return async (...args) => {\r\n      const { data, error } = await service(...args);\r\n\r\n      if (error) console.log(error.message);\r\n\r\n      if (data) {\r\n        dispatch({ type, payload: data });\r\n        const successMessage = success(data);\r\n        console.log(successMessage);\r\n      }\r\n    };\r\n  };\r\n}\r\n\r\nexport function useItemActions() {\r\n  const { itemDispatch } = useContext(ItemContext);\r\n\r\n  const createAction = createDispatchActions(itemDispatch);\r\n\r\n  const add = createAction({\r\n    service: addItem,\r\n    type: 'add',\r\n    success: (data) => `Added ${data.itemname}`,\r\n  });\r\n\r\n  const update = createAction({\r\n    service: updateItem,\r\n    type: 'update',\r\n    success: (data) => `Updated ${data.itemname}`,\r\n  });\r\n\r\n  const remove = createAction({\r\n    service: removeItem,\r\n    type: 'remove',\r\n    success: (data) => `Removed ${data.itemname}`,\r\n  });\r\n  return { add, update, remove };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}