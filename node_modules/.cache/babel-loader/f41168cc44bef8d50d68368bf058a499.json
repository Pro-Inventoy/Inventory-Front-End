{"ast":null,"code":"import compareVersions from 'compare-versions';\nimport { CodedError } from './errors/CodedError';\nconst postedWarnings = {};\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\n\nexport default function deprecate(library, deprecatedAPI) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    currentVersion,\n    versionToRemove,\n    replacement\n  } = options;\n  const code = codeFromLibrary(library);\n  const key = `${code}:${deprecatedAPI}:${replacement}`;\n\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (!currentVersion || !versionToRemove || compareVersions(currentVersion, versionToRemove) >= 0) {\n    let message = `\\`${deprecatedAPI}\\` has been removed`;\n\n    if (versionToRemove) {\n      message = `${message} as of version \"${versionToRemove}\"`;\n    }\n\n    if (replacement && replacement.length) {\n      message = `${message} please migrate to: \\`${replacement}\\``;\n    }\n\n    throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n  }\n\n  let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library, message) {\n  return `${library}: ${message}`;\n}\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\n\n\nfunction codeFromLibrary(library) {\n  const code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}","map":{"version":3,"mappings":"AAAA,OAAOA,eAAP,MAA4B,kBAA5B;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,MAAMC,cAAc,GAA+B,EAAnD;AAEA;;;;AAGA,eAAc,SAAUC,SAAV,CACZC,OADY,EAEZC,aAFY,EAON;EAAA,IAJNC,OAIM,uEAAF,EAAE;EAEN,MAAM;IAAEC,cAAF;IAAkBC,eAAlB;IAAmCC;EAAnC,IAAmDH,OAAzD;EACA,MAAMI,IAAI,GAAGC,eAAe,CAACP,OAAD,CAA5B;EACA,MAAMQ,GAAG,GAAG,GAAGF,IAAI,IAAIL,aAAa,IAAII,WAAW,EAAnD;;EACA,IAAI,CAACP,cAAc,CAACU,GAAD,CAAnB,EAA0B;IACxBV,cAAc,CAACU,GAAD,CAAd,GAAsB,IAAtB;EACD;;EAED,IACE,CAACL,cAAD,IACA,CAACC,eADD,IAEAR,eAAe,CAACO,cAAD,EAAiBC,eAAjB,CAAf,IAAoD,CAHtD,EAIE;IACA,IAAIK,OAAO,GAAG,KAAKR,aAAa,qBAAhC;;IACA,IAAIG,eAAJ,EAAqB;MACnBK,OAAO,GAAG,GAAGA,OAAO,mBAAmBL,eAAe,GAAtD;IACD;;IACD,IAAIC,WAAW,IAAIA,WAAW,CAACK,MAA/B,EAAuC;MACrCD,OAAO,GAAG,GAAGA,OAAO,yBAAyBJ,WAAW,IAAxD;IACD;;IAED,MAAM,IAAIR,UAAJ,CAAe,oBAAf,EAAqCc,cAAc,CAACX,OAAD,EAAUS,OAAV,CAAnD,CAAN;EACD;;EAED,IAAIA,OAAO,GAAG,KAAKR,aAAa,wBAAhC;;EACA,IAAII,WAAW,IAAIA,WAAW,CAACK,MAA/B,EAAuC;IACrCD,OAAO,GAAG,GAAGA,OAAO,kBAAkBJ,WAAW,IAAjD;EACD;;EACD,IAAID,eAAe,IAAIA,eAAe,CAACM,MAAvC,EAA+C;IAC7CD,OAAO,GAAG,GAAGA,OAAO,oCAAoCL,eAAe,GAAvE;EACD;;EACDQ,OAAO,CAACC,IAAR,CAAaF,cAAc,CAACX,OAAD,EAAUS,OAAV,CAA3B;AACD;;AAED,SAASE,cAAT,CAAwBX,OAAxB,EAAyCS,OAAzC,EAAwD;EACtD,OAAO,GAAGT,OAAO,KAAKS,OAAO,EAA7B;AACD;AAED;;;;;;;AAKA,SAASF,eAAT,CAAyBP,OAAzB,EAAwC;EACtC,MAAMM,IAAI,GAAGN,OAAO,CAACc,OAAR,CAAgB,OAAhB,EAAyB,GAAzB,EAA8BC,WAA9B,EAAb;EACA,OAAOT,IAAP;AACD","names":["compareVersions","CodedError","postedWarnings","deprecate","library","deprecatedAPI","options","currentVersion","versionToRemove","replacement","code","codeFromLibrary","key","message","length","prependLibrary","console","warn","replace","toUpperCase"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\expo-modules-core\\src\\deprecate.ts"],"sourcesContent":["import compareVersions from 'compare-versions';\n\nimport { CodedError } from './errors/CodedError';\n\nconst postedWarnings: { [key: string]: boolean } = {};\n\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function deprecate(\n  library: string,\n  deprecatedAPI: string,\n  options: {\n    replacement?: string;\n    currentVersion?: string;\n    versionToRemove?: string;\n  } = {}\n): void {\n  const { currentVersion, versionToRemove, replacement } = options;\n  const code = codeFromLibrary(library);\n  const key = `${code}:${deprecatedAPI}:${replacement}`;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (\n    !currentVersion ||\n    !versionToRemove ||\n    compareVersions(currentVersion, versionToRemove) >= 0\n  ) {\n    let message = `\\`${deprecatedAPI}\\` has been removed`;\n    if (versionToRemove) {\n      message = `${message} as of version \"${versionToRemove}\"`;\n    }\n    if (replacement && replacement.length) {\n      message = `${message} please migrate to: \\`${replacement}\\``;\n    }\n\n    throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n  }\n\n  let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library: string, message: string): string {\n  return `${library}: ${message}`;\n}\n\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library: string): string {\n  const code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}\n"]},"metadata":{},"sourceType":"module"}