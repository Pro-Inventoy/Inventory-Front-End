{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar zlib = require('zlib');\n\nvar ChunkStream = require('./chunkstream');\n\nvar FilterAsync = require('./filter-parse-async');\n\nvar Parser = require('./parser');\n\nvar bitmapper = require('./bitmapper');\n\nvar formatNormaliser = require('./format-normaliser');\n\nvar ParserAsync = module.exports = function (options) {\n  ChunkStream.call(this);\n  this._parser = new Parser(options, {\n    read: this.read.bind(this),\n    error: this._handleError.bind(this),\n    metadata: this._handleMetaData.bind(this),\n    gamma: this.emit.bind(this, 'gamma'),\n    palette: this._handlePalette.bind(this),\n    transColor: this._handleTransColor.bind(this),\n    finished: this._finished.bind(this),\n    inflateData: this._inflateData.bind(this),\n    simpleTransparency: this._simpleTransparency.bind(this),\n    headersFinished: this._headersFinished.bind(this)\n  });\n  this._options = options;\n  this.writable = true;\n\n  this._parser.start();\n};\n\nutil.inherits(ParserAsync, ChunkStream);\n\nParserAsync.prototype._handleError = function (err) {\n  this.emit('error', err);\n  this.writable = false;\n  this.destroy();\n\n  if (this._inflate && this._inflate.destroy) {\n    this._inflate.destroy();\n  }\n\n  if (this._filter) {\n    this._filter.destroy(); // For backward compatibility with Node 7 and below.\n    // Suppress errors due to _inflate calling write() even after\n    // it's destroy()'ed.\n\n\n    this._filter.on('error', function () {});\n  }\n\n  this.errord = true;\n};\n\nParserAsync.prototype._inflateData = function (data) {\n  if (!this._inflate) {\n    if (this._bitmapInfo.interlace) {\n      this._inflate = zlib.createInflate();\n\n      this._inflate.on('error', this.emit.bind(this, 'error'));\n\n      this._filter.on('complete', this._complete.bind(this));\n\n      this._inflate.pipe(this._filter);\n    } else {\n      var rowSize = (this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1;\n      var imageSize = rowSize * this._bitmapInfo.height;\n      var chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);\n      this._inflate = zlib.createInflate({\n        chunkSize: chunkSize\n      });\n      var leftToInflate = imageSize;\n      var emitError = this.emit.bind(this, 'error');\n\n      this._inflate.on('error', function (err) {\n        if (!leftToInflate) {\n          return;\n        }\n\n        emitError(err);\n      });\n\n      this._filter.on('complete', this._complete.bind(this));\n\n      var filterWrite = this._filter.write.bind(this._filter);\n\n      this._inflate.on('data', function (chunk) {\n        if (!leftToInflate) {\n          return;\n        }\n\n        if (chunk.length > leftToInflate) {\n          chunk = chunk.slice(0, leftToInflate);\n        }\n\n        leftToInflate -= chunk.length;\n        filterWrite(chunk);\n      });\n\n      this._inflate.on('end', this._filter.end.bind(this._filter));\n    }\n  }\n\n  this._inflate.write(data);\n};\n\nParserAsync.prototype._handleMetaData = function (metaData) {\n  this._metaData = metaData;\n  this._bitmapInfo = Object.create(metaData);\n  this._filter = new FilterAsync(this._bitmapInfo);\n};\n\nParserAsync.prototype._handleTransColor = function (transColor) {\n  this._bitmapInfo.transColor = transColor;\n};\n\nParserAsync.prototype._handlePalette = function (palette) {\n  this._bitmapInfo.palette = palette;\n};\n\nParserAsync.prototype._simpleTransparency = function () {\n  this._metaData.alpha = true;\n};\n\nParserAsync.prototype._headersFinished = function () {\n  // Up until this point, we don't know if we have a tRNS chunk (alpha)\n  // so we can't emit metadata any earlier\n  this.emit('metadata', this._metaData);\n};\n\nParserAsync.prototype._finished = function () {\n  if (this.errord) {\n    return;\n  }\n\n  if (!this._inflate) {\n    this.emit('error', 'No Inflate block');\n  } else {\n    // no more data to inflate\n    this._inflate.end();\n  }\n\n  this.destroySoon();\n};\n\nParserAsync.prototype._complete = function (filteredData) {\n  if (this.errord) {\n    return;\n  }\n\n  try {\n    var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);\n    var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);\n    bitmapData = null;\n  } catch (ex) {\n    this._handleError(ex);\n\n    return;\n  }\n\n  this.emit('parsed', normalisedBitmapData);\n};","map":{"version":3,"names":["util","require","zlib","ChunkStream","FilterAsync","Parser","bitmapper","formatNormaliser","ParserAsync","module","exports","options","call","_parser","read","bind","error","_handleError","metadata","_handleMetaData","gamma","emit","palette","_handlePalette","transColor","_handleTransColor","finished","_finished","inflateData","_inflateData","simpleTransparency","_simpleTransparency","headersFinished","_headersFinished","_options","writable","start","inherits","prototype","err","destroy","_inflate","_filter","on","errord","data","_bitmapInfo","interlace","createInflate","_complete","pipe","rowSize","width","bpp","depth","imageSize","height","chunkSize","Math","max","Z_MIN_CHUNK","leftToInflate","emitError","filterWrite","write","chunk","length","slice","end","metaData","_metaData","Object","create","alpha","destroySoon","filteredData","bitmapData","dataToBitMap","normalisedBitmapData","ex"],"sources":["C:/Users/khaym/Desktop/finalproject/Inventory-Front-End/node_modules/pngjs/lib/parser-async.js"],"sourcesContent":["'use strict';\n\nvar util = require('util');\nvar zlib = require('zlib');\nvar ChunkStream = require('./chunkstream');\nvar FilterAsync = require('./filter-parse-async');\nvar Parser = require('./parser');\nvar bitmapper = require('./bitmapper');\nvar formatNormaliser = require('./format-normaliser');\n\nvar ParserAsync = module.exports = function(options) {\n  ChunkStream.call(this);\n\n  this._parser = new Parser(options, {\n    read: this.read.bind(this),\n    error: this._handleError.bind(this),\n    metadata: this._handleMetaData.bind(this),\n    gamma: this.emit.bind(this, 'gamma'),\n    palette: this._handlePalette.bind(this),\n    transColor: this._handleTransColor.bind(this),\n    finished: this._finished.bind(this),\n    inflateData: this._inflateData.bind(this),\n    simpleTransparency: this._simpleTransparency.bind(this),\n    headersFinished: this._headersFinished.bind(this)\n  });\n  this._options = options;\n  this.writable = true;\n\n  this._parser.start();\n};\nutil.inherits(ParserAsync, ChunkStream);\n\n\nParserAsync.prototype._handleError = function(err) {\n\n  this.emit('error', err);\n\n  this.writable = false;\n\n  this.destroy();\n\n  if (this._inflate && this._inflate.destroy) {\n    this._inflate.destroy();\n  }\n\n  if (this._filter) {\n    this._filter.destroy();\n    // For backward compatibility with Node 7 and below.\n    // Suppress errors due to _inflate calling write() even after\n    // it's destroy()'ed.\n    this._filter.on('error', function() {});\n  }\n\n  this.errord = true;\n};\n\nParserAsync.prototype._inflateData = function(data) {\n  if (!this._inflate) {\n    if (this._bitmapInfo.interlace) {\n      this._inflate = zlib.createInflate();\n\n      this._inflate.on('error', this.emit.bind(this, 'error'));\n      this._filter.on('complete', this._complete.bind(this));\n\n      this._inflate.pipe(this._filter);\n    }\n    else {\n      var rowSize = ((this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7) >> 3) + 1;\n      var imageSize = rowSize * this._bitmapInfo.height;\n      var chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);\n\n      this._inflate = zlib.createInflate({ chunkSize: chunkSize });\n      var leftToInflate = imageSize;\n\n      var emitError = this.emit.bind(this, 'error');\n      this._inflate.on('error', function(err) {\n        if (!leftToInflate) {\n          return;\n        }\n\n        emitError(err);\n      });\n      this._filter.on('complete', this._complete.bind(this));\n\n      var filterWrite = this._filter.write.bind(this._filter);\n      this._inflate.on('data', function(chunk) {\n        if (!leftToInflate) {\n          return;\n        }\n\n        if (chunk.length > leftToInflate) {\n          chunk = chunk.slice(0, leftToInflate);\n        }\n\n        leftToInflate -= chunk.length;\n\n        filterWrite(chunk);\n      });\n\n      this._inflate.on('end', this._filter.end.bind(this._filter));\n    }\n  }\n  this._inflate.write(data);\n};\n\nParserAsync.prototype._handleMetaData = function(metaData) {\n  this._metaData = metaData;\n  this._bitmapInfo = Object.create(metaData);\n\n  this._filter = new FilterAsync(this._bitmapInfo);\n};\n\nParserAsync.prototype._handleTransColor = function(transColor) {\n  this._bitmapInfo.transColor = transColor;\n};\n\nParserAsync.prototype._handlePalette = function(palette) {\n  this._bitmapInfo.palette = palette;\n};\n\nParserAsync.prototype._simpleTransparency = function() {\n  this._metaData.alpha = true;\n};\n\nParserAsync.prototype._headersFinished = function() {\n  // Up until this point, we don't know if we have a tRNS chunk (alpha)\n  // so we can't emit metadata any earlier\n  this.emit('metadata', this._metaData);\n};\n\nParserAsync.prototype._finished = function() {\n  if (this.errord) {\n    return;\n  }\n\n  if (!this._inflate) {\n    this.emit('error', 'No Inflate block');\n  }\n  else {\n    // no more data to inflate\n    this._inflate.end();\n  }\n  this.destroySoon();\n};\n\nParserAsync.prototype._complete = function(filteredData) {\n\n  if (this.errord) {\n    return;\n  }\n\n  try {\n    var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);\n\n    var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);\n    bitmapData = null;\n  }\n  catch (ex) {\n    this._handleError(ex);\n    return;\n  }\n\n  this.emit('parsed', normalisedBitmapData);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}