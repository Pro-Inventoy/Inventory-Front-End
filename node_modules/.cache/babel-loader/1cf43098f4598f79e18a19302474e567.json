{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExtension = exports.getType = exports.addType = void 0;\nvar mimeTypes = {};\n\nvar findType = function findType(extension) {\n  return Object.entries(mimeTypes).find(function (type) {\n    return type[1].includes(extension);\n  }) || [];\n};\n\nvar addType = function addType(mime, extensions) {\n  mimeTypes[mime] = extensions;\n};\n/**\n * Lookup a mime type based on extension\n * @param {string} path path to find extension for\n * @returns {string} mime found mime type\n */\n\n\nexports.addType = addType;\n\nvar getType = function getType(path) {\n  var pathParts = path.split('/').slice(-1);\n  var extension = pathParts[pathParts.length - 1].split('.').pop();\n  var type = findType(extension);\n  return type[0];\n};\n/**\n * Return file extension associated with a mime type\n * @param {string} type mime type to look up\n * @returns {string} extension file extension\n */\n\n\nexports.getType = getType;\n\nvar getExtension = function getExtension(type) {\n  return (mimeTypes[type.toLowerCase()] || [])[0];\n};\n\nexports.getExtension = getExtension;","map":{"version":3,"mappings":";;;;;;AAAA,IAAMA,SAAS,GAAG,EAAlB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,YAAS;EAAA,OACxBC,MAAM,CAACC,OAAPD,CAAeF,SAAfE,EAA0BE,IAA1BF,CAA+B,gBAAI;IAAA,OAAIG,IAAI,CAAC,CAAD,CAAJA,CAAQC,QAARD,CAAiBE,SAAjBF,CAAJ;EAAnC,MAAuE,EAD/C;AAA1B;;AAGO,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,UAAP,EAAsB;EAC3CV,SAAS,CAACS,IAAD,CAATT,GAAkBU,UAAlBV;AADK;AAIP;;;;;;;;;AAKO,IAAMW,OAAO,GAAG,SAAVA,OAAU,OAAQ;EAC7B,IAAMC,SAAS,GAAGC,IAAI,CAACC,KAALD,CAAW,GAAXA,EAAgBE,KAAhBF,CAAsB,CAAC,CAAvBA,CAAlB;EACA,IAAMN,SAAS,GAAGK,SAAS,CAACA,SAAS,CAACI,MAAVJ,GAAmB,CAApB,CAATA,CAAgCE,KAAhCF,CAAsC,GAAtCA,EAA2CK,GAA3CL,EAAlB;EACA,IAAMP,IAAI,GAAGJ,QAAQ,CAACM,SAAD,CAArB;EAEA,OAAOF,IAAI,CAAC,CAAD,CAAX;AALK;AAQP;;;;;;;;;AAKO,IAAMa,YAAY,GAAG,SAAfA,YAAe,OAAI;EAAA,OAAI,CAAClB,SAAS,CAACK,IAAI,CAACc,WAALd,EAAD,CAATL,IAAiC,EAAlC,EAAsC,CAAtC,CAAJ;AAAzB","names":["mimeTypes","findType","Object","entries","find","type","includes","extension","addType","mime","extensions","getType","pathParts","path","split","slice","length","pop","getExtension","toLowerCase"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\@jimp\\core\\src\\utils\\mime.js"],"sourcesContent":["const mimeTypes = {};\n\nconst findType = extension =>\n  Object.entries(mimeTypes).find(type => type[1].includes(extension)) || [];\n\nexport const addType = (mime, extensions) => {\n  mimeTypes[mime] = extensions;\n};\n\n/**\n * Lookup a mime type based on extension\n * @param {string} path path to find extension for\n * @returns {string} mime found mime type\n */\nexport const getType = path => {\n  const pathParts = path.split('/').slice(-1);\n  const extension = pathParts[pathParts.length - 1].split('.').pop();\n  const type = findType(extension);\n\n  return type[0];\n};\n\n/**\n * Return file extension associated with a mime type\n * @param {string} type mime type to look up\n * @returns {string} extension file extension\n */\nexport const getExtension = type => (mimeTypes[type.toLowerCase()] || [])[0];\n"]},"metadata":{},"sourceType":"script"}