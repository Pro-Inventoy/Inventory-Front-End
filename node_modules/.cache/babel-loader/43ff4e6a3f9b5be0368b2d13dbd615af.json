{"ast":null,"code":"/**\n * @author shaozilee\n *\n * Bmp format decoder,support 1bit 4bit 8bit 24bit bmp\n *\n */\nfunction BmpDecoder(buffer, is_with_alpha) {\n  this.pos = 0;\n  this.buffer = buffer;\n  this.is_with_alpha = !!is_with_alpha;\n  this.bottom_up = true;\n  this.flag = this.buffer.toString(\"utf-8\", 0, this.pos += 2);\n  if (this.flag != \"BM\") throw new Error(\"Invalid BMP File\");\n  this.parseHeader();\n  this.parseRGBA();\n}\n\nBmpDecoder.prototype.parseHeader = function () {\n  this.fileSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.reserved = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.offset = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.headerSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.width = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.height = this.buffer.readInt32LE(this.pos);\n  this.pos += 4;\n  this.planes = this.buffer.readUInt16LE(this.pos);\n  this.pos += 2;\n  this.bitPP = this.buffer.readUInt16LE(this.pos);\n  this.pos += 2;\n  this.compress = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.rawSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.hr = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.vr = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.colors = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.importantColors = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n\n  if (this.bitPP === 16 && this.is_with_alpha) {\n    this.bitPP = 15;\n  }\n\n  if (this.bitPP < 15) {\n    var len = this.colors === 0 ? 1 << this.bitPP : this.colors;\n    this.palette = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var blue = this.buffer.readUInt8(this.pos++);\n      var green = this.buffer.readUInt8(this.pos++);\n      var red = this.buffer.readUInt8(this.pos++);\n      var quad = this.buffer.readUInt8(this.pos++);\n      this.palette[i] = {\n        red: red,\n        green: green,\n        blue: blue,\n        quad: quad\n      };\n    }\n  }\n\n  if (this.height < 0) {\n    this.height *= -1;\n    this.bottom_up = false;\n  }\n};\n\nBmpDecoder.prototype.parseRGBA = function () {\n  var bitn = \"bit\" + this.bitPP;\n  var len = this.width * this.height * 4;\n  this.data = new Buffer(len);\n  this[bitn]();\n};\n\nBmpDecoder.prototype.bit1 = function () {\n  var xlen = Math.ceil(this.width / 8);\n  var mode = xlen % 4;\n  var y = this.height >= 0 ? this.height - 1 : -this.height;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < xlen; x++) {\n      var b = this.buffer.readUInt8(this.pos++);\n      var location = line * this.width * 4 + x * 8 * 4;\n\n      for (var i = 0; i < 8; i++) {\n        if (x * 8 + i < this.width) {\n          var rgb = this.palette[b >> 7 - i & 0x1];\n          this.data[location + i * 4] = 0;\n          this.data[location + i * 4 + 1] = rgb.blue;\n          this.data[location + i * 4 + 2] = rgb.green;\n          this.data[location + i * 4 + 3] = rgb.red;\n        } else {\n          break;\n        }\n      }\n    }\n\n    if (mode != 0) {\n      this.pos += 4 - mode;\n    }\n  }\n};\n\nBmpDecoder.prototype.bit4 = function () {\n  //RLE-4\n  if (this.compress == 2) {\n    this.data.fill(0xff);\n    var location = 0;\n    var lines = this.bottom_up ? this.height - 1 : 0;\n    var low_nibble = false; //for all count of pixel\n\n    while (location < this.data.length) {\n      var a = this.buffer.readUInt8(this.pos++);\n      var b = this.buffer.readUInt8(this.pos++); //absolute mode\n\n      if (a == 0) {\n        if (b == 0) {\n          //line end\n          if (this.bottom_up) {\n            lines--;\n          } else {\n            lines++;\n          }\n\n          location = lines * this.width * 4;\n          low_nibble = false;\n          continue;\n        } else if (b == 1) {\n          //image end\n          break;\n        } else if (b == 2) {\n          //offset x,y\n          var x = this.buffer.readUInt8(this.pos++);\n          var y = this.buffer.readUInt8(this.pos++);\n\n          if (this.bottom_up) {\n            lines -= y;\n          } else {\n            lines += y;\n          }\n\n          location += y * this.width * 4 + x * 4;\n        } else {\n          var c = this.buffer.readUInt8(this.pos++);\n\n          for (var i = 0; i < b; i++) {\n            if (low_nibble) {\n              setPixelData.call(this, c & 0x0f);\n            } else {\n              setPixelData.call(this, (c & 0xf0) >> 4);\n            }\n\n            if (i & 1 && i + 1 < b) {\n              c = this.buffer.readUInt8(this.pos++);\n            }\n\n            low_nibble = !low_nibble;\n          }\n\n          if ((b + 1 >> 1 & 1) == 1) {\n            this.pos++;\n          }\n        }\n      } else {\n        //encoded mode\n        for (var i = 0; i < a; i++) {\n          if (low_nibble) {\n            setPixelData.call(this, b & 0x0f);\n          } else {\n            setPixelData.call(this, (b & 0xf0) >> 4);\n          }\n\n          low_nibble = !low_nibble;\n        }\n      }\n    }\n\n    function setPixelData(rgbIndex) {\n      var rgb = this.palette[rgbIndex];\n      this.data[location] = 0;\n      this.data[location + 1] = rgb.blue;\n      this.data[location + 2] = rgb.green;\n      this.data[location + 3] = rgb.red;\n      location += 4;\n    }\n  } else {\n    var xlen = Math.ceil(this.width / 2);\n    var mode = xlen % 4;\n\n    for (var y = this.height - 1; y >= 0; y--) {\n      var line = this.bottom_up ? y : this.height - 1 - y;\n\n      for (var x = 0; x < xlen; x++) {\n        var b = this.buffer.readUInt8(this.pos++);\n        var location = line * this.width * 4 + x * 2 * 4;\n        var before = b >> 4;\n        var after = b & 0x0F;\n        var rgb = this.palette[before];\n        this.data[location] = 0;\n        this.data[location + 1] = rgb.blue;\n        this.data[location + 2] = rgb.green;\n        this.data[location + 3] = rgb.red;\n        if (x * 2 + 1 >= this.width) break;\n        rgb = this.palette[after];\n        this.data[location + 4] = 0;\n        this.data[location + 4 + 1] = rgb.blue;\n        this.data[location + 4 + 2] = rgb.green;\n        this.data[location + 4 + 3] = rgb.red;\n      }\n\n      if (mode != 0) {\n        this.pos += 4 - mode;\n      }\n    }\n  }\n};\n\nBmpDecoder.prototype.bit8 = function () {\n  //RLE-8\n  if (this.compress == 1) {\n    this.data.fill(0xff);\n    var location = 0;\n    var lines = this.bottom_up ? this.height - 1 : 0;\n\n    while (location < this.data.length) {\n      var a = this.buffer.readUInt8(this.pos++);\n      var b = this.buffer.readUInt8(this.pos++); //absolute mode\n\n      if (a == 0) {\n        if (b == 0) {\n          //line end\n          if (this.bottom_up) {\n            lines--;\n          } else {\n            lines++;\n          }\n\n          location = lines * this.width * 4;\n          continue;\n        } else if (b == 1) {\n          //image end\n          break;\n        } else if (b == 2) {\n          //offset x,y\n          var x = this.buffer.readUInt8(this.pos++);\n          var y = this.buffer.readUInt8(this.pos++);\n\n          if (this.bottom_up) {\n            lines -= y;\n          } else {\n            lines += y;\n          }\n\n          location += y * this.width * 4 + x * 4;\n        } else {\n          for (var i = 0; i < b; i++) {\n            var c = this.buffer.readUInt8(this.pos++);\n            setPixelData.call(this, c);\n          }\n\n          if (b & 1 == 1) {\n            this.pos++;\n          }\n        }\n      } else {\n        //encoded mode\n        for (var i = 0; i < a; i++) {\n          setPixelData.call(this, b);\n        }\n      }\n    }\n\n    function setPixelData(rgbIndex) {\n      var rgb = this.palette[rgbIndex];\n      this.data[location] = 0;\n      this.data[location + 1] = rgb.blue;\n      this.data[location + 2] = rgb.green;\n      this.data[location + 3] = rgb.red;\n      location += 4;\n    }\n  } else {\n    var mode = this.width % 4;\n\n    for (var y = this.height - 1; y >= 0; y--) {\n      var line = this.bottom_up ? y : this.height - 1 - y;\n\n      for (var x = 0; x < this.width; x++) {\n        var b = this.buffer.readUInt8(this.pos++);\n        var location = line * this.width * 4 + x * 4;\n\n        if (b < this.palette.length) {\n          var rgb = this.palette[b];\n          this.data[location] = 0;\n          this.data[location + 1] = rgb.blue;\n          this.data[location + 2] = rgb.green;\n          this.data[location + 3] = rgb.red;\n        } else {\n          this.data[location] = 0;\n          this.data[location + 1] = 0xFF;\n          this.data[location + 2] = 0xFF;\n          this.data[location + 3] = 0xFF;\n        }\n      }\n\n      if (mode != 0) {\n        this.pos += 4 - mode;\n      }\n    }\n  }\n};\n\nBmpDecoder.prototype.bit15 = function () {\n  var dif_w = this.width % 3;\n\n  var _11111 = parseInt(\"11111\", 2),\n      _1_5 = _11111;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < this.width; x++) {\n      var B = this.buffer.readUInt16LE(this.pos);\n      this.pos += 2;\n      var blue = (B & _1_5) / _1_5 * 255 | 0;\n      var green = (B >> 5 & _1_5) / _1_5 * 255 | 0;\n      var red = (B >> 10 & _1_5) / _1_5 * 255 | 0;\n      var alpha = B >> 15 ? 0xFF : 0x00;\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = alpha;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    } //skip extra bytes\n\n\n    this.pos += dif_w;\n  }\n};\n\nBmpDecoder.prototype.bit16 = function () {\n  var dif_w = this.width % 2 * 2; //default xrgb555\n\n  this.maskRed = 0x7C00;\n  this.maskGreen = 0x3E0;\n  this.maskBlue = 0x1F;\n  this.mask0 = 0;\n\n  if (this.compress == 3) {\n    this.maskRed = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.maskGreen = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.maskBlue = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.mask0 = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n  }\n\n  var ns = [0, 0, 0];\n\n  for (var i = 0; i < 16; i++) {\n    if (this.maskRed >> i & 0x01) ns[0]++;\n    if (this.maskGreen >> i & 0x01) ns[1]++;\n    if (this.maskBlue >> i & 0x01) ns[2]++;\n  }\n\n  ns[1] += ns[0];\n  ns[2] += ns[1];\n  ns[0] = 8 - ns[0];\n  ns[1] -= 8;\n  ns[2] -= 8;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < this.width; x++) {\n      var B = this.buffer.readUInt16LE(this.pos);\n      this.pos += 2;\n      var blue = (B & this.maskBlue) << ns[0];\n      var green = (B & this.maskGreen) >> ns[1];\n      var red = (B & this.maskRed) >> ns[2];\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = 0;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    } //skip extra bytes\n\n\n    this.pos += dif_w;\n  }\n};\n\nBmpDecoder.prototype.bit24 = function () {\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < this.width; x++) {\n      //Little Endian rgb\n      var blue = this.buffer.readUInt8(this.pos++);\n      var green = this.buffer.readUInt8(this.pos++);\n      var red = this.buffer.readUInt8(this.pos++);\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = 0;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    } //skip extra bytes\n\n\n    this.pos += this.width % 4;\n  }\n};\n/**\n * add 32bit decode func\n * @author soubok\n */\n\n\nBmpDecoder.prototype.bit32 = function () {\n  //BI_BITFIELDS\n  if (this.compress == 3) {\n    this.maskRed = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.maskGreen = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.maskBlue = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.mask0 = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n\n    for (var y = this.height - 1; y >= 0; y--) {\n      var line = this.bottom_up ? y : this.height - 1 - y;\n\n      for (var x = 0; x < this.width; x++) {\n        //Little Endian rgba\n        var alpha = this.buffer.readUInt8(this.pos++);\n        var blue = this.buffer.readUInt8(this.pos++);\n        var green = this.buffer.readUInt8(this.pos++);\n        var red = this.buffer.readUInt8(this.pos++);\n        var location = line * this.width * 4 + x * 4;\n        this.data[location] = alpha;\n        this.data[location + 1] = blue;\n        this.data[location + 2] = green;\n        this.data[location + 3] = red;\n      }\n    }\n  } else {\n    for (var y = this.height - 1; y >= 0; y--) {\n      var line = this.bottom_up ? y : this.height - 1 - y;\n\n      for (var x = 0; x < this.width; x++) {\n        //Little Endian argb\n        var blue = this.buffer.readUInt8(this.pos++);\n        var green = this.buffer.readUInt8(this.pos++);\n        var red = this.buffer.readUInt8(this.pos++);\n        var alpha = this.buffer.readUInt8(this.pos++);\n        var location = line * this.width * 4 + x * 4;\n        this.data[location] = alpha;\n        this.data[location + 1] = blue;\n        this.data[location + 2] = green;\n        this.data[location + 3] = red;\n      }\n    }\n  }\n};\n\nBmpDecoder.prototype.getData = function () {\n  return this.data;\n};\n\nmodule.exports = function (bmpData) {\n  var decoder = new BmpDecoder(bmpData);\n  return decoder;\n};","map":{"version":3,"names":["BmpDecoder","buffer","is_with_alpha","pos","bottom_up","flag","toString","Error","parseHeader","parseRGBA","prototype","fileSize","readUInt32LE","reserved","offset","headerSize","width","height","readInt32LE","planes","readUInt16LE","bitPP","compress","rawSize","hr","vr","colors","importantColors","len","palette","Array","i","blue","readUInt8","green","red","quad","bitn","data","Buffer","bit1","xlen","Math","ceil","mode","y","line","x","b","location","rgb","bit4","fill","lines","low_nibble","length","a","c","setPixelData","call","rgbIndex","before","after","bit8","bit15","dif_w","_11111","parseInt","_1_5","B","alpha","bit16","maskRed","maskGreen","maskBlue","mask0","ns","bit24","bit32","getData","module","exports","bmpData","decoder"],"sources":["C:/Users/khaym/Desktop/finalproject/Inventory-Front-End/node_modules/bmp-js/lib/decoder.js"],"sourcesContent":["/**\n * @author shaozilee\n *\n * Bmp format decoder,support 1bit 4bit 8bit 24bit bmp\n *\n */\n\nfunction BmpDecoder(buffer,is_with_alpha) {\n  this.pos = 0;\n  this.buffer = buffer;\n  this.is_with_alpha = !!is_with_alpha;\n  this.bottom_up = true;\n  this.flag = this.buffer.toString(\"utf-8\", 0, this.pos += 2);\n  if (this.flag != \"BM\") throw new Error(\"Invalid BMP File\");\n  this.parseHeader();\n  this.parseRGBA();\n}\n\nBmpDecoder.prototype.parseHeader = function() {\n  this.fileSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.reserved = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.offset = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.headerSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.width = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.height = this.buffer.readInt32LE(this.pos);\n  this.pos += 4;\n  this.planes = this.buffer.readUInt16LE(this.pos);\n  this.pos += 2;\n  this.bitPP = this.buffer.readUInt16LE(this.pos);\n  this.pos += 2;\n  this.compress = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.rawSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.hr = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.vr = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.colors = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.importantColors = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n\n  if(this.bitPP === 16 && this.is_with_alpha){\n    this.bitPP = 15\n  }\n  if (this.bitPP < 15) {\n    var len = this.colors === 0 ? 1 << this.bitPP : this.colors;\n    this.palette = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var blue = this.buffer.readUInt8(this.pos++);\n      var green = this.buffer.readUInt8(this.pos++);\n      var red = this.buffer.readUInt8(this.pos++);\n      var quad = this.buffer.readUInt8(this.pos++);\n      this.palette[i] = {\n        red: red,\n        green: green,\n        blue: blue,\n        quad: quad\n      };\n    }\n  }\n  if(this.height < 0) {\n    this.height *= -1;\n    this.bottom_up = false;\n  }\n\n}\n\nBmpDecoder.prototype.parseRGBA = function() {\n    var bitn = \"bit\" + this.bitPP;\n    var len = this.width * this.height * 4;\n    this.data = new Buffer(len);\n    this[bitn]();\n};\n\nBmpDecoder.prototype.bit1 = function() {\n  var xlen = Math.ceil(this.width / 8);\n  var mode = xlen%4;\n  var y = this.height >= 0 ? this.height - 1 : -this.height\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y\n    for (var x = 0; x < xlen; x++) {\n      var b = this.buffer.readUInt8(this.pos++);\n      var location = line * this.width * 4 + x*8*4;\n      for (var i = 0; i < 8; i++) {\n        if(x*8+i<this.width){\n          var rgb = this.palette[((b>>(7-i))&0x1)];\n\n          this.data[location+i*4] = 0;\n          this.data[location+i*4 + 1] = rgb.blue;\n          this.data[location+i*4 + 2] = rgb.green;\n          this.data[location+i*4 + 3] = rgb.red;\n\n        }else{\n          break;\n        }\n      }\n    }\n\n    if (mode != 0){\n      this.pos+=(4 - mode);\n    }\n  }\n};\n\nBmpDecoder.prototype.bit4 = function() {\n    //RLE-4\n    if(this.compress == 2){\n        this.data.fill(0xff);\n\n        var location = 0;\n        var lines = this.bottom_up?this.height-1:0;\n        var low_nibble = false;//for all count of pixel\n\n        while(location<this.data.length){\n            var a = this.buffer.readUInt8(this.pos++);\n            var b = this.buffer.readUInt8(this.pos++);\n            //absolute mode\n            if(a == 0){\n                if(b == 0){//line end\n                    if(this.bottom_up){\n                        lines--;\n                    }else{\n                        lines++;\n                    }\n                    location = lines*this.width*4;\n                    low_nibble = false;\n                    continue;\n                }else if(b == 1){//image end\n                    break;\n                }else if(b ==2){\n                    //offset x,y\n                    var x = this.buffer.readUInt8(this.pos++);\n                    var y = this.buffer.readUInt8(this.pos++);\n                    if(this.bottom_up){\n                        lines-=y;\n                    }else{\n                        lines+=y;\n                    }\n\n                    location +=(y*this.width*4+x*4);\n                }else{\n                    var c = this.buffer.readUInt8(this.pos++);\n                    for(var i=0;i<b;i++){\n                        if (low_nibble) {\n                            setPixelData.call(this, (c & 0x0f));\n                        } else {\n                            setPixelData.call(this, (c & 0xf0)>>4);\n                        }\n\n                        if ((i & 1) && (i+1 < b)){\n                            c = this.buffer.readUInt8(this.pos++);\n                        }\n\n                        low_nibble = !low_nibble;\n                    }\n\n                    if ((((b+1) >> 1) & 1 ) == 1){\n                        this.pos++\n                    }\n                }\n\n            }else{//encoded mode\n                for (var i = 0; i < a; i++) {\n                    if (low_nibble) {\n                        setPixelData.call(this, (b & 0x0f));\n                    } else {\n                        setPixelData.call(this, (b & 0xf0)>>4);\n                    }\n                    low_nibble = !low_nibble;\n                }\n            }\n\n        }\n\n\n\n\n        function setPixelData(rgbIndex){\n            var rgb = this.palette[rgbIndex];\n            this.data[location] = 0;\n            this.data[location + 1] = rgb.blue;\n            this.data[location + 2] = rgb.green;\n            this.data[location + 3] = rgb.red;\n            location+=4;\n        }\n    }else{\n\n      var xlen = Math.ceil(this.width/2);\n      var mode = xlen%4;\n      for (var y = this.height - 1; y >= 0; y--) {\n        var line = this.bottom_up ? y : this.height - 1 - y\n        for (var x = 0; x < xlen; x++) {\n          var b = this.buffer.readUInt8(this.pos++);\n          var location = line * this.width * 4 + x*2*4;\n\n          var before = b>>4;\n          var after = b&0x0F;\n\n          var rgb = this.palette[before];\n          this.data[location] = 0;\n          this.data[location + 1] = rgb.blue;\n          this.data[location + 2] = rgb.green;\n          this.data[location + 3] = rgb.red;\n\n\n          if(x*2+1>=this.width)break;\n\n          rgb = this.palette[after];\n\n          this.data[location+4] = 0;\n          this.data[location+4 + 1] = rgb.blue;\n          this.data[location+4 + 2] = rgb.green;\n          this.data[location+4 + 3] = rgb.red;\n\n        }\n\n        if (mode != 0){\n          this.pos+=(4 - mode);\n        }\n      }\n\n    }\n\n};\n\nBmpDecoder.prototype.bit8 = function() {\n    //RLE-8\n    if(this.compress == 1){\n        this.data.fill(0xff);\n\n        var location = 0;\n        var lines = this.bottom_up?this.height-1:0;\n\n        while(location<this.data.length){\n            var a = this.buffer.readUInt8(this.pos++);\n            var b = this.buffer.readUInt8(this.pos++);\n            //absolute mode\n            if(a == 0){\n                if(b == 0){//line end\n                    if(this.bottom_up){\n                        lines--;\n                    }else{\n                        lines++;\n                    }\n                    location = lines*this.width*4;\n                    continue;\n                }else if(b == 1){//image end\n                    break;\n                }else if(b ==2){\n                    //offset x,y\n                    var x = this.buffer.readUInt8(this.pos++);\n                    var y = this.buffer.readUInt8(this.pos++);\n                    if(this.bottom_up){\n                        lines-=y;\n                    }else{\n                        lines+=y;\n                    }\n\n                    location +=(y*this.width*4+x*4);\n                }else{\n                    for(var i=0;i<b;i++){\n                        var c = this.buffer.readUInt8(this.pos++);\n                        setPixelData.call(this, c);\n                    }\n                    if(b&1 == 1){\n                        this.pos++;\n                    }\n\n                }\n\n            }else{//encoded mode\n                for (var i = 0; i < a; i++) {\n                    setPixelData.call(this, b);\n                }\n            }\n\n        }\n\n\n\n\n        function setPixelData(rgbIndex){\n            var rgb = this.palette[rgbIndex];\n            this.data[location] = 0;\n            this.data[location + 1] = rgb.blue;\n            this.data[location + 2] = rgb.green;\n            this.data[location + 3] = rgb.red;\n            location+=4;\n        }\n    }else {\n        var mode = this.width % 4;\n        for (var y = this.height - 1; y >= 0; y--) {\n            var line = this.bottom_up ? y : this.height - 1 - y\n            for (var x = 0; x < this.width; x++) {\n                var b = this.buffer.readUInt8(this.pos++);\n                var location = line * this.width * 4 + x * 4;\n                if (b < this.palette.length) {\n                    var rgb = this.palette[b];\n\n                    this.data[location] = 0;\n                    this.data[location + 1] = rgb.blue;\n                    this.data[location + 2] = rgb.green;\n                    this.data[location + 3] = rgb.red;\n\n                } else {\n                    this.data[location] = 0;\n                    this.data[location + 1] = 0xFF;\n                    this.data[location + 2] = 0xFF;\n                    this.data[location + 3] = 0xFF;\n                }\n            }\n            if (mode != 0) {\n                this.pos += (4 - mode);\n            }\n        }\n    }\n};\n\nBmpDecoder.prototype.bit15 = function() {\n  var dif_w =this.width % 3;\n  var _11111 = parseInt(\"11111\", 2),_1_5 = _11111;\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y\n    for (var x = 0; x < this.width; x++) {\n\n      var B = this.buffer.readUInt16LE(this.pos);\n      this.pos+=2;\n      var blue = (B & _1_5) / _1_5 * 255 | 0;\n      var green = (B >> 5 & _1_5 ) / _1_5 * 255 | 0;\n      var red = (B >> 10 & _1_5) / _1_5 * 255 | 0;\n      var alpha = (B>>15)?0xFF:0x00;\n\n      var location = line * this.width * 4 + x * 4;\n\n      this.data[location] = alpha;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += dif_w;\n  }\n};\n\nBmpDecoder.prototype.bit16 = function() {\n  var dif_w =(this.width % 2)*2;\n  //default xrgb555\n  this.maskRed = 0x7C00;\n  this.maskGreen = 0x3E0;\n  this.maskBlue =0x1F;\n  this.mask0 = 0;\n\n  if(this.compress == 3){\n    this.maskRed = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskGreen = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskBlue = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.mask0 = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n  }\n\n\n  var ns=[0,0,0];\n  for (var i=0;i<16;i++){\n    if ((this.maskRed>>i)&0x01) ns[0]++;\n    if ((this.maskGreen>>i)&0x01) ns[1]++;\n    if ((this.maskBlue>>i)&0x01) ns[2]++;\n  }\n  ns[1]+=ns[0]; ns[2]+=ns[1];\tns[0]=8-ns[0]; ns[1]-=8; ns[2]-=8;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n    for (var x = 0; x < this.width; x++) {\n\n      var B = this.buffer.readUInt16LE(this.pos);\n      this.pos+=2;\n\n      var blue = (B&this.maskBlue)<<ns[0];\n      var green = (B&this.maskGreen)>>ns[1];\n      var red = (B&this.maskRed)>>ns[2];\n\n      var location = line * this.width * 4 + x * 4;\n\n      this.data[location] = 0;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += dif_w;\n  }\n};\n\nBmpDecoder.prototype.bit24 = function() {\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y\n    for (var x = 0; x < this.width; x++) {\n      //Little Endian rgb\n      var blue = this.buffer.readUInt8(this.pos++);\n      var green = this.buffer.readUInt8(this.pos++);\n      var red = this.buffer.readUInt8(this.pos++);\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = 0;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += (this.width % 4);\n  }\n\n};\n\n/**\n * add 32bit decode func\n * @author soubok\n */\nBmpDecoder.prototype.bit32 = function() {\n  //BI_BITFIELDS\n  if(this.compress == 3){\n    this.maskRed = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskGreen = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskBlue = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.mask0 = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n      for (var y = this.height - 1; y >= 0; y--) {\n          var line = this.bottom_up ? y : this.height - 1 - y;\n          for (var x = 0; x < this.width; x++) {\n              //Little Endian rgba\n              var alpha = this.buffer.readUInt8(this.pos++);\n              var blue = this.buffer.readUInt8(this.pos++);\n              var green = this.buffer.readUInt8(this.pos++);\n              var red = this.buffer.readUInt8(this.pos++);\n              var location = line * this.width * 4 + x * 4;\n              this.data[location] = alpha;\n              this.data[location + 1] = blue;\n              this.data[location + 2] = green;\n              this.data[location + 3] = red;\n          }\n      }\n\n  }else{\n      for (var y = this.height - 1; y >= 0; y--) {\n          var line = this.bottom_up ? y : this.height - 1 - y;\n          for (var x = 0; x < this.width; x++) {\n              //Little Endian argb\n              var blue = this.buffer.readUInt8(this.pos++);\n              var green = this.buffer.readUInt8(this.pos++);\n              var red = this.buffer.readUInt8(this.pos++);\n              var alpha = this.buffer.readUInt8(this.pos++);\n              var location = line * this.width * 4 + x * 4;\n              this.data[location] = alpha;\n              this.data[location + 1] = blue;\n              this.data[location + 2] = green;\n              this.data[location + 3] = red;\n          }\n      }\n\n  }\n\n\n\n\n};\n\nBmpDecoder.prototype.getData = function() {\n  return this.data;\n};\n\nmodule.exports = function(bmpData) {\n  var decoder = new BmpDecoder(bmpData);\n  return decoder;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}