{"ast":null,"code":"// (c) Dean McNamee <dean@gmail.com>, 2013.\n//\n// https://github.com/deanm/omggif\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n//\n// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n// including animation and compression.  It does not rely on any specific\n// underlying system, so should run in the browser, Node, or Plask.\n\"use strict\";\n\nfunction GifWriter(buf, width, height, gopts) {\n  var p = 0;\n  var gopts = gopts === undefined ? {} : gopts;\n  var loop_count = gopts.loop === undefined ? null : gopts.loop;\n  var global_palette = gopts.palette === undefined ? null : gopts.palette;\n  if (width <= 0 || height <= 0 || width > 65535 || height > 65535) throw new Error(\"Width/Height invalid.\");\n\n  function check_palette_and_num_colors(palette) {\n    var num_colors = palette.length;\n\n    if (num_colors < 2 || num_colors > 256 || num_colors & num_colors - 1) {\n      throw new Error(\"Invalid code/color length, must be power of 2 and 2 .. 256.\");\n    }\n\n    return num_colors;\n  } // - Header.\n\n\n  buf[p++] = 0x47;\n  buf[p++] = 0x49;\n  buf[p++] = 0x46; // GIF\n\n  buf[p++] = 0x38;\n  buf[p++] = 0x39;\n  buf[p++] = 0x61; // 89a\n  // Handling of Global Color Table (palette) and background index.\n\n  var gp_num_colors_pow2 = 0;\n  var background = 0;\n\n  if (global_palette !== null) {\n    var gp_num_colors = check_palette_and_num_colors(global_palette);\n\n    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;\n\n    gp_num_colors = 1 << gp_num_colors_pow2;\n    --gp_num_colors_pow2;\n\n    if (gopts.background !== undefined) {\n      background = gopts.background;\n      if (background >= gp_num_colors) throw new Error(\"Background index out of range.\"); // The GIF spec states that a background index of 0 should be ignored, so\n      // this is probably a mistake and you really want to set it to another\n      // slot in the palette.  But actually in the end most browsers, etc end\n      // up ignoring this almost completely (including for dispose background).\n\n      if (background === 0) throw new Error(\"Background index explicitly passed as 0.\");\n    }\n  } // - Logical Screen Descriptor.\n  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\n\n\n  buf[p++] = width & 0xff;\n  buf[p++] = width >> 8 & 0xff;\n  buf[p++] = height & 0xff;\n  buf[p++] = height >> 8 & 0xff; // NOTE: Indicates 0-bpp original color resolution (unused?).\n\n  buf[p++] = (global_palette !== null ? 0x80 : 0) | // Global Color Table Flag.\n  gp_num_colors_pow2; // NOTE: No sort flag (unused?).\n\n  buf[p++] = background; // Background Color Index.\n\n  buf[p++] = 0; // Pixel aspect ratio (unused?).\n  // - Global Color Table\n\n  if (global_palette !== null) {\n    for (var i = 0, il = global_palette.length; i < il; ++i) {\n      var rgb = global_palette[i];\n      buf[p++] = rgb >> 16 & 0xff;\n      buf[p++] = rgb >> 8 & 0xff;\n      buf[p++] = rgb & 0xff;\n    }\n  }\n\n  if (loop_count !== null) {\n    // Netscape block for looping.\n    if (loop_count < 0 || loop_count > 65535) throw new Error(\"Loop count invalid.\"); // Extension code, label, and length.\n\n    buf[p++] = 0x21;\n    buf[p++] = 0xff;\n    buf[p++] = 0x0b; // NETSCAPE2.0\n\n    buf[p++] = 0x4e;\n    buf[p++] = 0x45;\n    buf[p++] = 0x54;\n    buf[p++] = 0x53;\n    buf[p++] = 0x43;\n    buf[p++] = 0x41;\n    buf[p++] = 0x50;\n    buf[p++] = 0x45;\n    buf[p++] = 0x32;\n    buf[p++] = 0x2e;\n    buf[p++] = 0x30; // Sub-block\n\n    buf[p++] = 0x03;\n    buf[p++] = 0x01;\n    buf[p++] = loop_count & 0xff;\n    buf[p++] = loop_count >> 8 & 0xff;\n    buf[p++] = 0x00; // Terminator.\n  }\n\n  var ended = false;\n\n  this.addFrame = function (x, y, w, h, indexed_pixels, opts) {\n    if (ended === true) {\n      --p;\n      ended = false;\n    } // Un-end.\n\n\n    opts = opts === undefined ? {} : opts; // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\n    // canvas width/height, I imagine?\n\n    if (x < 0 || y < 0 || x > 65535 || y > 65535) throw new Error(\"x/y invalid.\");\n    if (w <= 0 || h <= 0 || w > 65535 || h > 65535) throw new Error(\"Width/Height invalid.\");\n    if (indexed_pixels.length < w * h) throw new Error(\"Not enough pixels for the frame size.\");\n    var using_local_palette = true;\n    var palette = opts.palette;\n\n    if (palette === undefined || palette === null) {\n      using_local_palette = false;\n      palette = global_palette;\n    }\n\n    if (palette === undefined || palette === null) throw new Error(\"Must supply either a local or global palette.\");\n    var num_colors = check_palette_and_num_colors(palette); // Compute the min_code_size (power of 2), destroying num_colors.\n\n    var min_code_size = 0;\n\n    while (num_colors >>= 1) ++min_code_size;\n\n    num_colors = 1 << min_code_size; // Now we can easily get it back.\n\n    var delay = opts.delay === undefined ? 0 : opts.delay; // From the spec:\n    //     0 -   No disposal specified. The decoder is\n    //           not required to take any action.\n    //     1 -   Do not dispose. The graphic is to be left\n    //           in place.\n    //     2 -   Restore to background color. The area used by the\n    //           graphic must be restored to the background color.\n    //     3 -   Restore to previous. The decoder is required to\n    //           restore the area overwritten by the graphic with\n    //           what was there prior to rendering the graphic.\n    //  4-7 -    To be defined.\n    // NOTE(deanm): Dispose background doesn't really work, apparently most\n    // browsers ignore the background palette index and clear to transparency.\n\n    var disposal = opts.disposal === undefined ? 0 : opts.disposal;\n    if (disposal < 0 || disposal > 3) // 4-7 is reserved.\n      throw new Error(\"Disposal out of range.\");\n    var use_transparency = false;\n    var transparent_index = 0;\n\n    if (opts.transparent !== undefined && opts.transparent !== null) {\n      use_transparency = true;\n      transparent_index = opts.transparent;\n      if (transparent_index < 0 || transparent_index >= num_colors) throw new Error(\"Transparent color index.\");\n    }\n\n    if (disposal !== 0 || use_transparency || delay !== 0) {\n      // - Graphics Control Extension\n      buf[p++] = 0x21;\n      buf[p++] = 0xf9; // Extension / Label.\n\n      buf[p++] = 4; // Byte size.\n\n      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);\n      buf[p++] = delay & 0xff;\n      buf[p++] = delay >> 8 & 0xff;\n      buf[p++] = transparent_index; // Transparent color index.\n\n      buf[p++] = 0; // Block Terminator.\n    } // - Image Descriptor\n\n\n    buf[p++] = 0x2c; // Image Seperator.\n\n    buf[p++] = x & 0xff;\n    buf[p++] = x >> 8 & 0xff; // Left.\n\n    buf[p++] = y & 0xff;\n    buf[p++] = y >> 8 & 0xff; // Top.\n\n    buf[p++] = w & 0xff;\n    buf[p++] = w >> 8 & 0xff;\n    buf[p++] = h & 0xff;\n    buf[p++] = h >> 8 & 0xff; // NOTE: No sort flag (unused?).\n    // TODO(deanm): Support interlace.\n\n    buf[p++] = using_local_palette === true ? 0x80 | min_code_size - 1 : 0; // - Local Color Table\n\n    if (using_local_palette === true) {\n      for (var i = 0, il = palette.length; i < il; ++i) {\n        var rgb = palette[i];\n        buf[p++] = rgb >> 16 & 0xff;\n        buf[p++] = rgb >> 8 & 0xff;\n        buf[p++] = rgb & 0xff;\n      }\n    }\n\n    p = GifWriterOutputLZWCodeStream(buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);\n    return p;\n  };\n\n  this.end = function () {\n    if (ended === false) {\n      buf[p++] = 0x3b; // Trailer.\n\n      ended = true;\n    }\n\n    return p;\n  };\n\n  this.getOutputBuffer = function () {\n    return buf;\n  };\n\n  this.setOutputBuffer = function (v) {\n    buf = v;\n  };\n\n  this.getOutputBufferPosition = function () {\n    return p;\n  };\n\n  this.setOutputBufferPosition = function (v) {\n    p = v;\n  };\n} // Main compression routine, palette indexes -> LZW code stream.\n// |index_stream| must have at least one entry.\n\n\nfunction GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\n  buf[p++] = min_code_size;\n  var cur_subblock = p++; // Pointing at the length field.\n\n  var clear_code = 1 << min_code_size;\n  var code_mask = clear_code - 1;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n  var cur_code_size = min_code_size + 1; // Number of bits per code.\n\n  var cur_shift = 0; // We have at most 12-bit codes, so we should have to hold a max of 19\n  // bits here (and then we would write out).\n\n  var cur = 0;\n\n  function emit_bytes_to_buffer(bit_block_size) {\n    while (cur_shift >= bit_block_size) {\n      buf[p++] = cur & 0xff;\n      cur >>= 8;\n      cur_shift -= 8;\n\n      if (p === cur_subblock + 256) {\n        // Finished a subblock.\n        buf[cur_subblock] = 255;\n        cur_subblock = p++;\n      }\n    }\n  }\n\n  function emit_code(c) {\n    cur |= c << cur_shift;\n    cur_shift += cur_code_size;\n    emit_bytes_to_buffer(8);\n  } // I am not an expert on the topic, and I don't want to write a thesis.\n  // However, it is good to outline here the basic algorithm and the few data\n  // structures and optimizations here that make this implementation fast.\n  // The basic idea behind LZW is to build a table of previously seen runs\n  // addressed by a short id (herein called output code).  All data is\n  // referenced by a code, which represents one or more values from the\n  // original input stream.  All input bytes can be referenced as the same\n  // value as an output code.  So if you didn't want any compression, you\n  // could more or less just output the original bytes as codes (there are\n  // some details to this, but it is the idea).  In order to achieve\n  // compression, values greater then the input range (codes can be up to\n  // 12-bit while input only 8-bit) represent a sequence of previously seen\n  // inputs.  The decompressor is able to build the same mapping while\n  // decoding, so there is always a shared common knowledge between the\n  // encoding and decoder, which is also important for \"timing\" aspects like\n  // how to handle variable bit width code encoding.\n  //\n  // One obvious but very important consequence of the table system is there\n  // is always a unique id (at most 12-bits) to map the runs.  'A' might be\n  // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship\n  // can be used for an effecient lookup strategy for the code mapping.  We\n  // need to know if a run has been seen before, and be able to map that run\n  // to the output code.  Since we start with known unique ids (input bytes),\n  // and then from those build more unique ids (table entries), we can\n  // continue this chain (almost like a linked list) to always have small\n  // integer values that represent the current byte chains in the encoder.\n  // This means instead of tracking the input bytes (AAAABCD) to know our\n  // current state, we can track the table entry for AAAABC (it is guaranteed\n  // to exist by the nature of the algorithm) and the next character D.\n  // Therefor the tuple of (table_entry, byte) is guaranteed to also be\n  // unique.  This allows us to create a simple lookup key for mapping input\n  // sequences to codes (table indices) without having to store or search\n  // any of the code sequences.  So if 'AAAA' has a table entry of 12, the\n  // tuple of ('AAAA', K) for any input byte K will be unique, and can be our\n  // key.  This leads to a integer value at most 20-bits, which can always\n  // fit in an SMI value and be used as a fast sparse array / object key.\n  // Output code for the current contents of the index buffer.\n\n\n  var ib_code = index_stream[0] & code_mask; // Load first input index.\n\n  var code_table = {}; // Key'd on our 20-bit \"tuple\".\n\n  emit_code(clear_code); // Spec says first code should be a clear code.\n  // First index already loaded, process the rest of the stream.\n\n  for (var i = 1, il = index_stream.length; i < il; ++i) {\n    var k = index_stream[i] & code_mask;\n    var cur_key = ib_code << 8 | k; // (prev, k) unique tuple.\n\n    var cur_code = code_table[cur_key]; // buffer + k.\n    // Check if we have to create a new code table entry.\n\n    if (cur_code === undefined) {\n      // We don't have buffer + k.\n      // Emit index buffer (without k).\n      // This is an inline version of emit_code, because this is the core\n      // writing routine of the compressor (and V8 cannot inline emit_code\n      // because it is a closure here in a different context).  Additionally\n      // we can call emit_byte_to_buffer less often, because we can have\n      // 30-bits (from our 31-bit signed SMI), and we know our codes will only\n      // be 12-bits, so can safely have 18-bits there without overflow.\n      // emit_code(ib_code);\n      cur |= ib_code << cur_shift;\n      cur_shift += cur_code_size;\n\n      while (cur_shift >= 8) {\n        buf[p++] = cur & 0xff;\n        cur >>= 8;\n        cur_shift -= 8;\n\n        if (p === cur_subblock + 256) {\n          // Finished a subblock.\n          buf[cur_subblock] = 255;\n          cur_subblock = p++;\n        }\n      }\n\n      if (next_code === 4096) {\n        // Table full, need a clear.\n        emit_code(clear_code);\n        next_code = eoi_code + 1;\n        cur_code_size = min_code_size + 1;\n        code_table = {};\n      } else {\n        // Table not full, insert a new entry.\n        // Increase our variable bit code sizes if necessary.  This is a bit\n        // tricky as it is based on \"timing\" between the encoding and\n        // decoder.  From the encoders perspective this should happen after\n        // we've already emitted the index buffer and are about to create the\n        // first table entry that would overflow our current code bit size.\n        if (next_code >= 1 << cur_code_size) ++cur_code_size;\n        code_table[cur_key] = next_code++; // Insert into code table.\n      }\n\n      ib_code = k; // Index buffer to single input k.\n    } else {\n      ib_code = cur_code; // Index buffer to sequence in code table.\n    }\n  }\n\n  emit_code(ib_code); // There will still be something in the index buffer.\n\n  emit_code(eoi_code); // End Of Information.\n  // Flush / finalize the sub-blocks stream to the buffer.\n\n  emit_bytes_to_buffer(1); // Finish the sub-blocks, writing out any unfinished lengths and\n  // terminating with a sub-block of length 0.  If we have already started\n  // but not yet used a sub-block it can just become the terminator.\n\n  if (cur_subblock + 1 === p) {\n    // Started but unused.\n    buf[cur_subblock] = 0;\n  } else {\n    // Started and used, write length and additional terminator block.\n    buf[cur_subblock] = p - cur_subblock - 1;\n    buf[p++] = 0;\n  }\n\n  return p;\n}\n\nfunction GifReader(buf) {\n  var p = 0; // - Header (GIF87a or GIF89a).\n\n  if (buf[p++] !== 0x47 || buf[p++] !== 0x49 || buf[p++] !== 0x46 || buf[p++] !== 0x38 || (buf[p++] + 1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {\n    throw new Error(\"Invalid GIF 87a/89a header.\");\n  } // - Logical Screen Descriptor.\n\n\n  var width = buf[p++] | buf[p++] << 8;\n  var height = buf[p++] | buf[p++] << 8;\n  var pf0 = buf[p++]; // <Packed Fields>.\n\n  var global_palette_flag = pf0 >> 7;\n  var num_global_colors_pow2 = pf0 & 0x7;\n  var num_global_colors = 1 << num_global_colors_pow2 + 1;\n  var background = buf[p++];\n  buf[p++]; // Pixel aspect ratio (unused?).\n\n  var global_palette_offset = null;\n  var global_palette_size = null;\n\n  if (global_palette_flag) {\n    global_palette_offset = p;\n    global_palette_size = num_global_colors;\n    p += num_global_colors * 3; // Seek past palette.\n  }\n\n  var no_eof = true;\n  var frames = [];\n  var delay = 0;\n  var transparent_index = null;\n  var disposal = 0; // 0 - No disposal specified.\n\n  var loop_count = null;\n  this.width = width;\n  this.height = height;\n\n  while (no_eof && p < buf.length) {\n    switch (buf[p++]) {\n      case 0x21:\n        // Graphics Control Extension Block\n        switch (buf[p++]) {\n          case 0xff:\n            // Application specific block\n            // Try if it's a Netscape block (with animation loop counter).\n            if (buf[p] !== 0x0b || // 21 FF already read, check block size.\n            // NETSCAPE2.0\n            buf[p + 1] == 0x4e && buf[p + 2] == 0x45 && buf[p + 3] == 0x54 && buf[p + 4] == 0x53 && buf[p + 5] == 0x43 && buf[p + 6] == 0x41 && buf[p + 7] == 0x50 && buf[p + 8] == 0x45 && buf[p + 9] == 0x32 && buf[p + 10] == 0x2e && buf[p + 11] == 0x30 && // Sub-block\n            buf[p + 12] == 0x03 && buf[p + 13] == 0x01 && buf[p + 16] == 0) {\n              p += 14;\n              loop_count = buf[p++] | buf[p++] << 8;\n              p++; // Skip terminator.\n            } else {\n              // We don't know what it is, just try to get past it.\n              p += 12;\n\n              while (true) {\n                // Seek through subblocks.\n                var block_size = buf[p++]; // Bad block size (ex: undefined from an out of bounds read).\n\n                if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n                if (block_size === 0) break; // 0 size is terminator\n\n                p += block_size;\n              }\n            }\n\n            break;\n\n          case 0xf9:\n            // Graphics Control Extension\n            if (buf[p++] !== 0x4 || buf[p + 4] !== 0) throw new Error(\"Invalid graphics extension block.\");\n            var pf1 = buf[p++];\n            delay = buf[p++] | buf[p++] << 8;\n            transparent_index = buf[p++];\n            if ((pf1 & 1) === 0) transparent_index = null;\n            disposal = pf1 >> 2 & 0x7;\n            p++; // Skip terminator.\n\n            break;\n\n          case 0xfe:\n            // Comment Extension.\n            while (true) {\n              // Seek through subblocks.\n              var block_size = buf[p++]; // Bad block size (ex: undefined from an out of bounds read).\n\n              if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n              if (block_size === 0) break; // 0 size is terminator\n              // console.log(buf.slice(p, p+block_size).toString('ascii'));\n\n              p += block_size;\n            }\n\n            break;\n\n          default:\n            throw new Error(\"Unknown graphic control label: 0x\" + buf[p - 1].toString(16));\n        }\n\n        break;\n\n      case 0x2c:\n        // Image Descriptor.\n        var x = buf[p++] | buf[p++] << 8;\n        var y = buf[p++] | buf[p++] << 8;\n        var w = buf[p++] | buf[p++] << 8;\n        var h = buf[p++] | buf[p++] << 8;\n        var pf2 = buf[p++];\n        var local_palette_flag = pf2 >> 7;\n        var interlace_flag = pf2 >> 6 & 1;\n        var num_local_colors_pow2 = pf2 & 0x7;\n        var num_local_colors = 1 << num_local_colors_pow2 + 1;\n        var palette_offset = global_palette_offset;\n        var palette_size = global_palette_size;\n        var has_local_palette = false;\n\n        if (local_palette_flag) {\n          var has_local_palette = true;\n          palette_offset = p; // Override with local palette.\n\n          palette_size = num_local_colors;\n          p += num_local_colors * 3; // Seek past palette.\n        }\n\n        var data_offset = p;\n        p++; // codesize\n\n        while (true) {\n          var block_size = buf[p++]; // Bad block size (ex: undefined from an out of bounds read).\n\n          if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n          if (block_size === 0) break; // 0 size is terminator\n\n          p += block_size;\n        }\n\n        frames.push({\n          x: x,\n          y: y,\n          width: w,\n          height: h,\n          has_local_palette: has_local_palette,\n          palette_offset: palette_offset,\n          palette_size: palette_size,\n          data_offset: data_offset,\n          data_length: p - data_offset,\n          transparent_index: transparent_index,\n          interlaced: !!interlace_flag,\n          delay: delay,\n          disposal: disposal\n        });\n        break;\n\n      case 0x3b:\n        // Trailer Marker (end of file).\n        no_eof = false;\n        break;\n\n      default:\n        throw new Error(\"Unknown gif block: 0x\" + buf[p - 1].toString(16));\n        break;\n    }\n  }\n\n  this.numFrames = function () {\n    return frames.length;\n  };\n\n  this.loopCount = function () {\n    return loop_count;\n  };\n\n  this.frameInfo = function (frame_num) {\n    if (frame_num < 0 || frame_num >= frames.length) throw new Error(\"Frame index out of range.\");\n    return frames[frame_num];\n  };\n\n  this.decodeAndBlitFrameBGRA = function (frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels); // At most 8-bit indices.\n\n    GifReaderLZWOutputIndexStream(buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset; // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256; // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n\n    var framewidth = frame.width;\n    var framestride = width - framewidth;\n    var xleft = framewidth; // Number of subrect pixels left in scanline.\n    // Output indicies of the top left and bottom right corners of the subrect.\n\n    var opbeg = (frame.y * width + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op = opbeg;\n    var scanstride = framestride * 4; // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7; // Pass 1.\n    }\n\n    var interlaceskip = 8; // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {\n        // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n\n        if (op >= opend) {\n          // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip - 1); // interlaceskip / 2 * 4 is interlaceskip << 1.\n\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = b;\n        pixels[op++] = g;\n        pixels[op++] = r;\n        pixels[op++] = 255;\n      }\n\n      --xleft;\n    }\n  }; // I will go to copy and paste hell one day...\n\n\n  this.decodeAndBlitFrameRGBA = function (frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels); // At most 8-bit indices.\n\n    GifReaderLZWOutputIndexStream(buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset; // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256; // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n\n    var framewidth = frame.width;\n    var framestride = width - framewidth;\n    var xleft = framewidth; // Number of subrect pixels left in scanline.\n    // Output indicies of the top left and bottom right corners of the subrect.\n\n    var opbeg = (frame.y * width + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op = opbeg;\n    var scanstride = framestride * 4; // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7; // Pass 1.\n    }\n\n    var interlaceskip = 8; // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {\n        // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n\n        if (op >= opend) {\n          // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip - 1); // interlaceskip / 2 * 4 is interlaceskip << 1.\n\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = r;\n        pixels[op++] = g;\n        pixels[op++] = b;\n        pixels[op++] = 255;\n      }\n\n      --xleft;\n    }\n  };\n}\n\nfunction GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {\n  var min_code_size = code_stream[p++];\n  var clear_code = 1 << min_code_size;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n  var cur_code_size = min_code_size + 1; // Number of bits per code.\n  // NOTE: This shares the same name as the encoder, but has a different\n  // meaning here.  Here this masks each code coming from the code stream.\n\n  var code_mask = (1 << cur_code_size) - 1;\n  var cur_shift = 0;\n  var cur = 0;\n  var op = 0; // Output pointer.\n\n  var subblock_size = code_stream[p++]; // TODO(deanm): Would using a TypedArray be any faster?  At least it would\n  // solve the fast mode / backing store uncertainty.\n  // var code_table = Array(4096);\n\n  var code_table = new Int32Array(4096); // Can be signed, we only use 20 bits.\n\n  var prev_code = null; // Track code-1.\n\n  while (true) {\n    // Read up to two bytes, making sure we always 12-bits for max sized code.\n    while (cur_shift < 16) {\n      if (subblock_size === 0) break; // No more data to be read.\n\n      cur |= code_stream[p++] << cur_shift;\n      cur_shift += 8;\n\n      if (subblock_size === 1) {\n        // Never let it get to 0 to hold logic above.\n        subblock_size = code_stream[p++]; // Next subblock.\n      } else {\n        --subblock_size;\n      }\n    } // TODO(deanm): We should never really get here, we should have received\n    // and EOI.\n\n\n    if (cur_shift < cur_code_size) break;\n    var code = cur & code_mask;\n    cur >>= cur_code_size;\n    cur_shift -= cur_code_size; // TODO(deanm): Maybe should check that the first code was a clear code,\n    // at least this is what you're supposed to do.  But actually our encoder\n    // now doesn't emit a clear code first anyway.\n\n    if (code === clear_code) {\n      // We don't actually have to clear the table.  This could be a good idea\n      // for greater error checking, but we don't really do any anyway.  We\n      // will just track it with next_code and overwrite old entries.\n      next_code = eoi_code + 1;\n      cur_code_size = min_code_size + 1;\n      code_mask = (1 << cur_code_size) - 1; // Don't update prev_code ?\n\n      prev_code = null;\n      continue;\n    } else if (code === eoi_code) {\n      break;\n    } // We have a similar situation as the decoder, where we want to store\n    // variable length entries (code table entries), but we want to do in a\n    // faster manner than an array of arrays.  The code below stores sort of a\n    // linked list within the code table, and then \"chases\" through it to\n    // construct the dictionary entries.  When a new entry is created, just the\n    // last byte is stored, and the rest (prefix) of the entry is only\n    // referenced by its table entry.  Then the code chases through the\n    // prefixes until it reaches a single byte code.  We have to chase twice,\n    // first to compute the length, and then to actually copy the data to the\n    // output (backwards, since we know the length).  The alternative would be\n    // storing something in an intermediate stack, but that doesn't make any\n    // more sense.  I implemented an approach where it also stored the length\n    // in the code table, although it's a bit tricky because you run out of\n    // bits (12 + 12 + 8), but I didn't measure much improvements (the table\n    // entries are generally not the long).  Even when I created benchmarks for\n    // very long table entries the complexity did not seem worth it.\n    // The code table stores the prefix entry in 12 bits and then the suffix\n    // byte in 8 bits, so each entry is 20 bits.\n\n\n    var chase_code = code < next_code ? code : prev_code; // Chase what we will output, either {CODE} or {CODE-1}.\n\n    var chase_length = 0;\n    var chase = chase_code;\n\n    while (chase > clear_code) {\n      chase = code_table[chase] >> 8;\n      ++chase_length;\n    }\n\n    var k = chase;\n    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);\n\n    if (op_end > output_length) {\n      console.log(\"Warning, gif stream longer than expected.\");\n      return;\n    } // Already have the first byte from the chase, might as well write it fast.\n\n\n    output[op++] = k;\n    op += chase_length;\n    var b = op; // Track pointer, writing backwards.\n\n    if (chase_code !== code) // The case of emitting {CODE-1} + k.\n      output[op++] = k;\n    chase = chase_code;\n\n    while (chase_length--) {\n      chase = code_table[chase];\n      output[--b] = chase & 0xff; // Write backwards.\n\n      chase >>= 8; // Pull down to the prefix code.\n    }\n\n    if (prev_code !== null && next_code < 4096) {\n      code_table[next_code++] = prev_code << 8 | k; // TODO(deanm): Figure out this clearing vs code growth logic better.  I\n      // have an feeling that it should just happen somewhere else, for now it\n      // is awkward between when we grow past the max and then hit a clear code.\n      // For now just check if we hit the max 12-bits (then a clear code should\n      // follow, also of course encoded in 12-bits).\n\n      if (next_code >= code_mask + 1 && cur_code_size < 12) {\n        ++cur_code_size;\n        code_mask = code_mask << 1 | 1;\n      }\n    }\n\n    prev_code = code;\n  }\n\n  if (op !== output_length) {\n    console.log(\"Warning, gif stream shorter than expected.\");\n  }\n\n  return output;\n} // CommonJS.\n\n\ntry {\n  exports.GifWriter = GifWriter;\n  exports.GifReader = GifReader;\n} catch (e) {}","map":{"version":3,"names":["GifWriter","buf","width","height","gopts","p","undefined","loop_count","loop","global_palette","palette","Error","check_palette_and_num_colors","num_colors","length","gp_num_colors_pow2","background","gp_num_colors","i","il","rgb","ended","addFrame","x","y","w","h","indexed_pixels","opts","using_local_palette","min_code_size","delay","disposal","use_transparency","transparent_index","transparent","GifWriterOutputLZWCodeStream","end","getOutputBuffer","setOutputBuffer","v","getOutputBufferPosition","setOutputBufferPosition","index_stream","cur_subblock","clear_code","code_mask","eoi_code","next_code","cur_code_size","cur_shift","cur","emit_bytes_to_buffer","bit_block_size","emit_code","c","ib_code","code_table","k","cur_key","cur_code","GifReader","pf0","global_palette_flag","num_global_colors_pow2","num_global_colors","global_palette_offset","global_palette_size","no_eof","frames","block_size","pf1","toString","pf2","local_palette_flag","interlace_flag","num_local_colors_pow2","num_local_colors","palette_offset","palette_size","has_local_palette","data_offset","push","data_length","interlaced","numFrames","loopCount","frameInfo","frame_num","decodeAndBlitFrameBGRA","pixels","frame","num_pixels","Uint8Array","GifReaderLZWOutputIndexStream","trans","framewidth","framestride","xleft","opbeg","opend","op","scanstride","interlaceskip","index","r","g","b","decodeAndBlitFrameRGBA","code_stream","output","output_length","subblock_size","Int32Array","prev_code","code","chase_code","chase_length","chase","op_end","console","log","exports","e"],"sources":["C:/Users/khaym/Desktop/finalproject/Inventory-Front-End/node_modules/omggif/omggif.js"],"sourcesContent":["// (c) Dean McNamee <dean@gmail.com>, 2013.\n//\n// https://github.com/deanm/omggif\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n//\n// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n// including animation and compression.  It does not rely on any specific\n// underlying system, so should run in the browser, Node, or Plask.\n\n\"use strict\";\n\nfunction GifWriter(buf, width, height, gopts) {\n  var p = 0;\n\n  var gopts = gopts === undefined ? { } : gopts;\n  var loop_count = gopts.loop === undefined ? null : gopts.loop;\n  var global_palette = gopts.palette === undefined ? null : gopts.palette;\n\n  if (width <= 0 || height <= 0 || width > 65535 || height > 65535)\n    throw new Error(\"Width/Height invalid.\");\n\n  function check_palette_and_num_colors(palette) {\n    var num_colors = palette.length;\n    if (num_colors < 2 || num_colors > 256 ||  num_colors & (num_colors-1)) {\n      throw new Error(\n          \"Invalid code/color length, must be power of 2 and 2 .. 256.\");\n    }\n    return num_colors;\n  }\n\n  // - Header.\n  buf[p++] = 0x47; buf[p++] = 0x49; buf[p++] = 0x46;  // GIF\n  buf[p++] = 0x38; buf[p++] = 0x39; buf[p++] = 0x61;  // 89a\n\n  // Handling of Global Color Table (palette) and background index.\n  var gp_num_colors_pow2 = 0;\n  var background = 0;\n  if (global_palette !== null) {\n    var gp_num_colors = check_palette_and_num_colors(global_palette);\n    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;\n    gp_num_colors = 1 << gp_num_colors_pow2;\n    --gp_num_colors_pow2;\n    if (gopts.background !== undefined) {\n      background = gopts.background;\n      if (background >= gp_num_colors)\n        throw new Error(\"Background index out of range.\");\n      // The GIF spec states that a background index of 0 should be ignored, so\n      // this is probably a mistake and you really want to set it to another\n      // slot in the palette.  But actually in the end most browsers, etc end\n      // up ignoring this almost completely (including for dispose background).\n      if (background === 0)\n        throw new Error(\"Background index explicitly passed as 0.\");\n    }\n  }\n\n  // - Logical Screen Descriptor.\n  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\n  buf[p++] = width & 0xff; buf[p++] = width >> 8 & 0xff;\n  buf[p++] = height & 0xff; buf[p++] = height >> 8 & 0xff;\n  // NOTE: Indicates 0-bpp original color resolution (unused?).\n  buf[p++] = (global_palette !== null ? 0x80 : 0) |  // Global Color Table Flag.\n             gp_num_colors_pow2;  // NOTE: No sort flag (unused?).\n  buf[p++] = background;  // Background Color Index.\n  buf[p++] = 0;  // Pixel aspect ratio (unused?).\n\n  // - Global Color Table\n  if (global_palette !== null) {\n    for (var i = 0, il = global_palette.length; i < il; ++i) {\n      var rgb = global_palette[i];\n      buf[p++] = rgb >> 16 & 0xff;\n      buf[p++] = rgb >> 8 & 0xff;\n      buf[p++] = rgb & 0xff;\n    }\n  }\n\n  if (loop_count !== null) {  // Netscape block for looping.\n    if (loop_count < 0 || loop_count > 65535)\n      throw new Error(\"Loop count invalid.\")\n    // Extension code, label, and length.\n    buf[p++] = 0x21; buf[p++] = 0xff; buf[p++] = 0x0b;\n    // NETSCAPE2.0\n    buf[p++] = 0x4e; buf[p++] = 0x45; buf[p++] = 0x54; buf[p++] = 0x53;\n    buf[p++] = 0x43; buf[p++] = 0x41; buf[p++] = 0x50; buf[p++] = 0x45;\n    buf[p++] = 0x32; buf[p++] = 0x2e; buf[p++] = 0x30;\n    // Sub-block\n    buf[p++] = 0x03; buf[p++] = 0x01;\n    buf[p++] = loop_count & 0xff; buf[p++] = loop_count >> 8 & 0xff;\n    buf[p++] = 0x00;  // Terminator.\n  }\n\n\n  var ended = false;\n\n  this.addFrame = function(x, y, w, h, indexed_pixels, opts) {\n    if (ended === true) { --p; ended = false; }  // Un-end.\n\n    opts = opts === undefined ? { } : opts;\n\n    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\n    // canvas width/height, I imagine?\n    if (x < 0 || y < 0 || x > 65535 || y > 65535)\n      throw new Error(\"x/y invalid.\")\n\n    if (w <= 0 || h <= 0 || w > 65535 || h > 65535)\n      throw new Error(\"Width/Height invalid.\")\n\n    if (indexed_pixels.length < w * h)\n      throw new Error(\"Not enough pixels for the frame size.\");\n\n    var using_local_palette = true;\n    var palette = opts.palette;\n    if (palette === undefined || palette === null) {\n      using_local_palette = false;\n      palette = global_palette;\n    }\n\n    if (palette === undefined || palette === null)\n      throw new Error(\"Must supply either a local or global palette.\");\n\n    var num_colors = check_palette_and_num_colors(palette);\n\n    // Compute the min_code_size (power of 2), destroying num_colors.\n    var min_code_size = 0;\n    while (num_colors >>= 1) ++min_code_size;\n    num_colors = 1 << min_code_size;  // Now we can easily get it back.\n\n    var delay = opts.delay === undefined ? 0 : opts.delay;\n\n    // From the spec:\n    //     0 -   No disposal specified. The decoder is\n    //           not required to take any action.\n    //     1 -   Do not dispose. The graphic is to be left\n    //           in place.\n    //     2 -   Restore to background color. The area used by the\n    //           graphic must be restored to the background color.\n    //     3 -   Restore to previous. The decoder is required to\n    //           restore the area overwritten by the graphic with\n    //           what was there prior to rendering the graphic.\n    //  4-7 -    To be defined.\n    // NOTE(deanm): Dispose background doesn't really work, apparently most\n    // browsers ignore the background palette index and clear to transparency.\n    var disposal = opts.disposal === undefined ? 0 : opts.disposal;\n    if (disposal < 0 || disposal > 3)  // 4-7 is reserved.\n      throw new Error(\"Disposal out of range.\");\n\n    var use_transparency = false;\n    var transparent_index = 0;\n    if (opts.transparent !== undefined && opts.transparent !== null) {\n      use_transparency = true;\n      transparent_index = opts.transparent;\n      if (transparent_index < 0 || transparent_index >= num_colors)\n        throw new Error(\"Transparent color index.\");\n    }\n\n    if (disposal !== 0 || use_transparency || delay !== 0) {\n      // - Graphics Control Extension\n      buf[p++] = 0x21; buf[p++] = 0xf9;  // Extension / Label.\n      buf[p++] = 4;  // Byte size.\n\n      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);\n      buf[p++] = delay & 0xff; buf[p++] = delay >> 8 & 0xff;\n      buf[p++] = transparent_index;  // Transparent color index.\n      buf[p++] = 0;  // Block Terminator.\n    }\n\n    // - Image Descriptor\n    buf[p++] = 0x2c;  // Image Seperator.\n    buf[p++] = x & 0xff; buf[p++] = x >> 8 & 0xff;  // Left.\n    buf[p++] = y & 0xff; buf[p++] = y >> 8 & 0xff;  // Top.\n    buf[p++] = w & 0xff; buf[p++] = w >> 8 & 0xff;\n    buf[p++] = h & 0xff; buf[p++] = h >> 8 & 0xff;\n    // NOTE: No sort flag (unused?).\n    // TODO(deanm): Support interlace.\n    buf[p++] = using_local_palette === true ? (0x80 | (min_code_size-1)) : 0;\n\n    // - Local Color Table\n    if (using_local_palette === true) {\n      for (var i = 0, il = palette.length; i < il; ++i) {\n        var rgb = palette[i];\n        buf[p++] = rgb >> 16 & 0xff;\n        buf[p++] = rgb >> 8 & 0xff;\n        buf[p++] = rgb & 0xff;\n      }\n    }\n\n    p = GifWriterOutputLZWCodeStream(\n            buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);\n\n    return p;\n  };\n\n  this.end = function() {\n    if (ended === false) {\n      buf[p++] = 0x3b;  // Trailer.\n      ended = true;\n    }\n    return p;\n  };\n\n  this.getOutputBuffer = function() { return buf; };\n  this.setOutputBuffer = function(v) { buf = v; };\n  this.getOutputBufferPosition = function() { return p; };\n  this.setOutputBufferPosition = function(v) { p = v; };\n}\n\n// Main compression routine, palette indexes -> LZW code stream.\n// |index_stream| must have at least one entry.\nfunction GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\n  buf[p++] = min_code_size;\n  var cur_subblock = p++;  // Pointing at the length field.\n\n  var clear_code = 1 << min_code_size;\n  var code_mask = clear_code - 1;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  var cur_shift = 0;\n  // We have at most 12-bit codes, so we should have to hold a max of 19\n  // bits here (and then we would write out).\n  var cur = 0;\n\n  function emit_bytes_to_buffer(bit_block_size) {\n    while (cur_shift >= bit_block_size) {\n      buf[p++] = cur & 0xff;\n      cur >>= 8; cur_shift -= 8;\n      if (p === cur_subblock + 256) {  // Finished a subblock.\n        buf[cur_subblock] = 255;\n        cur_subblock = p++;\n      }\n    }\n  }\n\n  function emit_code(c) {\n    cur |= c << cur_shift;\n    cur_shift += cur_code_size;\n    emit_bytes_to_buffer(8);\n  }\n\n  // I am not an expert on the topic, and I don't want to write a thesis.\n  // However, it is good to outline here the basic algorithm and the few data\n  // structures and optimizations here that make this implementation fast.\n  // The basic idea behind LZW is to build a table of previously seen runs\n  // addressed by a short id (herein called output code).  All data is\n  // referenced by a code, which represents one or more values from the\n  // original input stream.  All input bytes can be referenced as the same\n  // value as an output code.  So if you didn't want any compression, you\n  // could more or less just output the original bytes as codes (there are\n  // some details to this, but it is the idea).  In order to achieve\n  // compression, values greater then the input range (codes can be up to\n  // 12-bit while input only 8-bit) represent a sequence of previously seen\n  // inputs.  The decompressor is able to build the same mapping while\n  // decoding, so there is always a shared common knowledge between the\n  // encoding and decoder, which is also important for \"timing\" aspects like\n  // how to handle variable bit width code encoding.\n  //\n  // One obvious but very important consequence of the table system is there\n  // is always a unique id (at most 12-bits) to map the runs.  'A' might be\n  // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship\n  // can be used for an effecient lookup strategy for the code mapping.  We\n  // need to know if a run has been seen before, and be able to map that run\n  // to the output code.  Since we start with known unique ids (input bytes),\n  // and then from those build more unique ids (table entries), we can\n  // continue this chain (almost like a linked list) to always have small\n  // integer values that represent the current byte chains in the encoder.\n  // This means instead of tracking the input bytes (AAAABCD) to know our\n  // current state, we can track the table entry for AAAABC (it is guaranteed\n  // to exist by the nature of the algorithm) and the next character D.\n  // Therefor the tuple of (table_entry, byte) is guaranteed to also be\n  // unique.  This allows us to create a simple lookup key for mapping input\n  // sequences to codes (table indices) without having to store or search\n  // any of the code sequences.  So if 'AAAA' has a table entry of 12, the\n  // tuple of ('AAAA', K) for any input byte K will be unique, and can be our\n  // key.  This leads to a integer value at most 20-bits, which can always\n  // fit in an SMI value and be used as a fast sparse array / object key.\n\n  // Output code for the current contents of the index buffer.\n  var ib_code = index_stream[0] & code_mask;  // Load first input index.\n  var code_table = { };  // Key'd on our 20-bit \"tuple\".\n\n  emit_code(clear_code);  // Spec says first code should be a clear code.\n\n  // First index already loaded, process the rest of the stream.\n  for (var i = 1, il = index_stream.length; i < il; ++i) {\n    var k = index_stream[i] & code_mask;\n    var cur_key = ib_code << 8 | k;  // (prev, k) unique tuple.\n    var cur_code = code_table[cur_key];  // buffer + k.\n\n    // Check if we have to create a new code table entry.\n    if (cur_code === undefined) {  // We don't have buffer + k.\n      // Emit index buffer (without k).\n      // This is an inline version of emit_code, because this is the core\n      // writing routine of the compressor (and V8 cannot inline emit_code\n      // because it is a closure here in a different context).  Additionally\n      // we can call emit_byte_to_buffer less often, because we can have\n      // 30-bits (from our 31-bit signed SMI), and we know our codes will only\n      // be 12-bits, so can safely have 18-bits there without overflow.\n      // emit_code(ib_code);\n      cur |= ib_code << cur_shift;\n      cur_shift += cur_code_size;\n      while (cur_shift >= 8) {\n        buf[p++] = cur & 0xff;\n        cur >>= 8; cur_shift -= 8;\n        if (p === cur_subblock + 256) {  // Finished a subblock.\n          buf[cur_subblock] = 255;\n          cur_subblock = p++;\n        }\n      }\n\n      if (next_code === 4096) {  // Table full, need a clear.\n        emit_code(clear_code);\n        next_code = eoi_code + 1;\n        cur_code_size = min_code_size + 1;\n        code_table = { };\n      } else {  // Table not full, insert a new entry.\n        // Increase our variable bit code sizes if necessary.  This is a bit\n        // tricky as it is based on \"timing\" between the encoding and\n        // decoder.  From the encoders perspective this should happen after\n        // we've already emitted the index buffer and are about to create the\n        // first table entry that would overflow our current code bit size.\n        if (next_code >= (1 << cur_code_size)) ++cur_code_size;\n        code_table[cur_key] = next_code++;  // Insert into code table.\n      }\n\n      ib_code = k;  // Index buffer to single input k.\n    } else {\n      ib_code = cur_code;  // Index buffer to sequence in code table.\n    }\n  }\n\n  emit_code(ib_code);  // There will still be something in the index buffer.\n  emit_code(eoi_code);  // End Of Information.\n\n  // Flush / finalize the sub-blocks stream to the buffer.\n  emit_bytes_to_buffer(1);\n\n  // Finish the sub-blocks, writing out any unfinished lengths and\n  // terminating with a sub-block of length 0.  If we have already started\n  // but not yet used a sub-block it can just become the terminator.\n  if (cur_subblock + 1 === p) {  // Started but unused.\n    buf[cur_subblock] = 0;\n  } else {  // Started and used, write length and additional terminator block.\n    buf[cur_subblock] = p - cur_subblock - 1;\n    buf[p++] = 0;\n  }\n  return p;\n}\n\nfunction GifReader(buf) {\n  var p = 0;\n\n  // - Header (GIF87a or GIF89a).\n  if (buf[p++] !== 0x47 ||            buf[p++] !== 0x49 || buf[p++] !== 0x46 ||\n      buf[p++] !== 0x38 || (buf[p++]+1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {\n    throw new Error(\"Invalid GIF 87a/89a header.\");\n  }\n\n  // - Logical Screen Descriptor.\n  var width = buf[p++] | buf[p++] << 8;\n  var height = buf[p++] | buf[p++] << 8;\n  var pf0 = buf[p++];  // <Packed Fields>.\n  var global_palette_flag = pf0 >> 7;\n  var num_global_colors_pow2 = pf0 & 0x7;\n  var num_global_colors = 1 << (num_global_colors_pow2 + 1);\n  var background = buf[p++];\n  buf[p++];  // Pixel aspect ratio (unused?).\n\n  var global_palette_offset = null;\n  var global_palette_size   = null;\n\n  if (global_palette_flag) {\n    global_palette_offset = p;\n    global_palette_size = num_global_colors;\n    p += num_global_colors * 3;  // Seek past palette.\n  }\n\n  var no_eof = true;\n\n  var frames = [ ];\n\n  var delay = 0;\n  var transparent_index = null;\n  var disposal = 0;  // 0 - No disposal specified.\n  var loop_count = null;\n\n  this.width = width;\n  this.height = height;\n\n  while (no_eof && p < buf.length) {\n    switch (buf[p++]) {\n      case 0x21:  // Graphics Control Extension Block\n        switch (buf[p++]) {\n          case 0xff:  // Application specific block\n            // Try if it's a Netscape block (with animation loop counter).\n            if (buf[p   ] !== 0x0b ||  // 21 FF already read, check block size.\n                // NETSCAPE2.0\n                buf[p+1 ] == 0x4e && buf[p+2 ] == 0x45 && buf[p+3 ] == 0x54 &&\n                buf[p+4 ] == 0x53 && buf[p+5 ] == 0x43 && buf[p+6 ] == 0x41 &&\n                buf[p+7 ] == 0x50 && buf[p+8 ] == 0x45 && buf[p+9 ] == 0x32 &&\n                buf[p+10] == 0x2e && buf[p+11] == 0x30 &&\n                // Sub-block\n                buf[p+12] == 0x03 && buf[p+13] == 0x01 && buf[p+16] == 0) {\n              p += 14;\n              loop_count = buf[p++] | buf[p++] << 8;\n              p++;  // Skip terminator.\n            } else {  // We don't know what it is, just try to get past it.\n              p += 12;\n              while (true) {  // Seek through subblocks.\n                var block_size = buf[p++];\n                // Bad block size (ex: undefined from an out of bounds read).\n                if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n                if (block_size === 0) break;  // 0 size is terminator\n                p += block_size;\n              }\n            }\n            break;\n\n          case 0xf9:  // Graphics Control Extension\n            if (buf[p++] !== 0x4 || buf[p+4] !== 0)\n              throw new Error(\"Invalid graphics extension block.\");\n            var pf1 = buf[p++];\n            delay = buf[p++] | buf[p++] << 8;\n            transparent_index = buf[p++];\n            if ((pf1 & 1) === 0) transparent_index = null;\n            disposal = pf1 >> 2 & 0x7;\n            p++;  // Skip terminator.\n            break;\n\n          case 0xfe:  // Comment Extension.\n            while (true) {  // Seek through subblocks.\n              var block_size = buf[p++];\n              // Bad block size (ex: undefined from an out of bounds read).\n              if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n              if (block_size === 0) break;  // 0 size is terminator\n              // console.log(buf.slice(p, p+block_size).toString('ascii'));\n              p += block_size;\n            }\n            break;\n\n          default:\n            throw new Error(\n                \"Unknown graphic control label: 0x\" + buf[p-1].toString(16));\n        }\n        break;\n\n      case 0x2c:  // Image Descriptor.\n        var x = buf[p++] | buf[p++] << 8;\n        var y = buf[p++] | buf[p++] << 8;\n        var w = buf[p++] | buf[p++] << 8;\n        var h = buf[p++] | buf[p++] << 8;\n        var pf2 = buf[p++];\n        var local_palette_flag = pf2 >> 7;\n        var interlace_flag = pf2 >> 6 & 1;\n        var num_local_colors_pow2 = pf2 & 0x7;\n        var num_local_colors = 1 << (num_local_colors_pow2 + 1);\n        var palette_offset = global_palette_offset;\n        var palette_size = global_palette_size;\n        var has_local_palette = false;\n        if (local_palette_flag) {\n          var has_local_palette = true;\n          palette_offset = p;  // Override with local palette.\n          palette_size = num_local_colors;\n          p += num_local_colors * 3;  // Seek past palette.\n        }\n\n        var data_offset = p;\n\n        p++;  // codesize\n        while (true) {\n          var block_size = buf[p++];\n          // Bad block size (ex: undefined from an out of bounds read).\n          if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n          if (block_size === 0) break;  // 0 size is terminator\n          p += block_size;\n        }\n\n        frames.push({x: x, y: y, width: w, height: h,\n                     has_local_palette: has_local_palette,\n                     palette_offset: palette_offset,\n                     palette_size: palette_size,\n                     data_offset: data_offset,\n                     data_length: p - data_offset,\n                     transparent_index: transparent_index,\n                     interlaced: !!interlace_flag,\n                     delay: delay,\n                     disposal: disposal});\n        break;\n\n      case 0x3b:  // Trailer Marker (end of file).\n        no_eof = false;\n        break;\n\n      default:\n        throw new Error(\"Unknown gif block: 0x\" + buf[p-1].toString(16));\n        break;\n    }\n  }\n\n  this.numFrames = function() {\n    return frames.length;\n  };\n\n  this.loopCount = function() {\n    return loop_count;\n  };\n\n  this.frameInfo = function(frame_num) {\n    if (frame_num < 0 || frame_num >= frames.length)\n      throw new Error(\"Frame index out of range.\");\n    return frames[frame_num];\n  }\n\n  this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = b;\n        pixels[op++] = g;\n        pixels[op++] = r;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n\n  // I will go to copy and paste hell one day...\n  this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = r;\n        pixels[op++] = g;\n        pixels[op++] = b;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n}\n\nfunction GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {\n  var min_code_size = code_stream[p++];\n\n  var clear_code = 1 << min_code_size;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  // NOTE: This shares the same name as the encoder, but has a different\n  // meaning here.  Here this masks each code coming from the code stream.\n  var code_mask = (1 << cur_code_size) - 1;\n  var cur_shift = 0;\n  var cur = 0;\n\n  var op = 0;  // Output pointer.\n\n  var subblock_size = code_stream[p++];\n\n  // TODO(deanm): Would using a TypedArray be any faster?  At least it would\n  // solve the fast mode / backing store uncertainty.\n  // var code_table = Array(4096);\n  var code_table = new Int32Array(4096);  // Can be signed, we only use 20 bits.\n\n  var prev_code = null;  // Track code-1.\n\n  while (true) {\n    // Read up to two bytes, making sure we always 12-bits for max sized code.\n    while (cur_shift < 16) {\n      if (subblock_size === 0) break;  // No more data to be read.\n\n      cur |= code_stream[p++] << cur_shift;\n      cur_shift += 8;\n\n      if (subblock_size === 1) {  // Never let it get to 0 to hold logic above.\n        subblock_size = code_stream[p++];  // Next subblock.\n      } else {\n        --subblock_size;\n      }\n    }\n\n    // TODO(deanm): We should never really get here, we should have received\n    // and EOI.\n    if (cur_shift < cur_code_size)\n      break;\n\n    var code = cur & code_mask;\n    cur >>= cur_code_size;\n    cur_shift -= cur_code_size;\n\n    // TODO(deanm): Maybe should check that the first code was a clear code,\n    // at least this is what you're supposed to do.  But actually our encoder\n    // now doesn't emit a clear code first anyway.\n    if (code === clear_code) {\n      // We don't actually have to clear the table.  This could be a good idea\n      // for greater error checking, but we don't really do any anyway.  We\n      // will just track it with next_code and overwrite old entries.\n\n      next_code = eoi_code + 1;\n      cur_code_size = min_code_size + 1;\n      code_mask = (1 << cur_code_size) - 1;\n\n      // Don't update prev_code ?\n      prev_code = null;\n      continue;\n    } else if (code === eoi_code) {\n      break;\n    }\n\n    // We have a similar situation as the decoder, where we want to store\n    // variable length entries (code table entries), but we want to do in a\n    // faster manner than an array of arrays.  The code below stores sort of a\n    // linked list within the code table, and then \"chases\" through it to\n    // construct the dictionary entries.  When a new entry is created, just the\n    // last byte is stored, and the rest (prefix) of the entry is only\n    // referenced by its table entry.  Then the code chases through the\n    // prefixes until it reaches a single byte code.  We have to chase twice,\n    // first to compute the length, and then to actually copy the data to the\n    // output (backwards, since we know the length).  The alternative would be\n    // storing something in an intermediate stack, but that doesn't make any\n    // more sense.  I implemented an approach where it also stored the length\n    // in the code table, although it's a bit tricky because you run out of\n    // bits (12 + 12 + 8), but I didn't measure much improvements (the table\n    // entries are generally not the long).  Even when I created benchmarks for\n    // very long table entries the complexity did not seem worth it.\n    // The code table stores the prefix entry in 12 bits and then the suffix\n    // byte in 8 bits, so each entry is 20 bits.\n\n    var chase_code = code < next_code ? code : prev_code;\n\n    // Chase what we will output, either {CODE} or {CODE-1}.\n    var chase_length = 0;\n    var chase = chase_code;\n    while (chase > clear_code) {\n      chase = code_table[chase] >> 8;\n      ++chase_length;\n    }\n\n    var k = chase;\n\n    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);\n    if (op_end > output_length) {\n      console.log(\"Warning, gif stream longer than expected.\");\n      return;\n    }\n\n    // Already have the first byte from the chase, might as well write it fast.\n    output[op++] = k;\n\n    op += chase_length;\n    var b = op;  // Track pointer, writing backwards.\n\n    if (chase_code !== code)  // The case of emitting {CODE-1} + k.\n      output[op++] = k;\n\n    chase = chase_code;\n    while (chase_length--) {\n      chase = code_table[chase];\n      output[--b] = chase & 0xff;  // Write backwards.\n      chase >>= 8;  // Pull down to the prefix code.\n    }\n\n    if (prev_code !== null && next_code < 4096) {\n      code_table[next_code++] = prev_code << 8 | k;\n      // TODO(deanm): Figure out this clearing vs code growth logic better.  I\n      // have an feeling that it should just happen somewhere else, for now it\n      // is awkward between when we grow past the max and then hit a clear code.\n      // For now just check if we hit the max 12-bits (then a clear code should\n      // follow, also of course encoded in 12-bits).\n      if (next_code >= code_mask+1 && cur_code_size < 12) {\n        ++cur_code_size;\n        code_mask = code_mask << 1 | 1;\n      }\n    }\n\n    prev_code = code;\n  }\n\n  if (op !== output_length) {\n    console.log(\"Warning, gif stream shorter than expected.\");\n  }\n\n  return output;\n}\n\n// CommonJS.\ntry { exports.GifWriter = GifWriter; exports.GifReader = GifReader } catch(e) {}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}