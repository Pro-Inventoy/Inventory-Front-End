{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _utils = require(\"@jimp/utils\");\n\nvar _default = function _default() {\n  return {\n    /**\n     * Blits a source image on to this image\n     * @param {Jimp} src the source Jimp instance\n     * @param {number} x the x position to blit the image\n     * @param {number} y the y position to blit the image\n     * @param {number} srcx (optional) the x position from which to crop the source image\n     * @param {number} srcy (optional) the y position from which to crop the source image\n     * @param {number} srcw (optional) the width to which to crop the source image\n     * @param {number} srch (optional) the height to which to crop the source image\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    blit: function blit(src, x, y, srcx, srcy, srcw, srch, cb) {\n      if (!(src instanceof this.constructor)) {\n        return _utils.throwError.call(this, 'The source must be a Jimp image', cb);\n      }\n\n      if (typeof x !== 'number' || typeof y !== 'number') {\n        return _utils.throwError.call(this, 'x and y must be numbers', cb);\n      }\n\n      if (typeof srcx === 'function') {\n        cb = srcx;\n        srcx = 0;\n        srcy = 0;\n        srcw = src.bitmap.width;\n        srch = src.bitmap.height;\n      } else if ((0, _typeof2[\"default\"])(srcx) === (0, _typeof2[\"default\"])(srcy) && (0, _typeof2[\"default\"])(srcy) === (0, _typeof2[\"default\"])(srcw) && (0, _typeof2[\"default\"])(srcw) === (0, _typeof2[\"default\"])(srch)) {\n        srcx = srcx || 0;\n        srcy = srcy || 0;\n        srcw = srcw || src.bitmap.width;\n        srch = srch || src.bitmap.height;\n      } else {\n        return _utils.throwError.call(this, 'srcx, srcy, srcw, srch must be numbers', cb);\n      } // round input\n\n\n      x = Math.round(x);\n      y = Math.round(y); // round input\n\n      srcx = Math.round(srcx);\n      srcy = Math.round(srcy);\n      srcw = Math.round(srcw);\n      srch = Math.round(srch);\n      var maxWidth = this.bitmap.width;\n      var maxHeight = this.bitmap.height;\n      var baseImage = this;\n      src.scanQuiet(srcx, srcy, srcw, srch, function (sx, sy, idx) {\n        var xOffset = x + sx - srcx;\n        var yOffset = y + sy - srcy;\n\n        if (xOffset >= 0 && yOffset >= 0 && maxWidth - xOffset > 0 && maxHeight - yOffset > 0) {\n          var dstIdx = baseImage.getPixelIndex(xOffset, yOffset);\n          var _src = {\n            r: this.bitmap.data[idx],\n            g: this.bitmap.data[idx + 1],\n            b: this.bitmap.data[idx + 2],\n            a: this.bitmap.data[idx + 3]\n          };\n          var dst = {\n            r: baseImage.bitmap.data[dstIdx],\n            g: baseImage.bitmap.data[dstIdx + 1],\n            b: baseImage.bitmap.data[dstIdx + 2],\n            a: baseImage.bitmap.data[dstIdx + 3]\n          };\n          baseImage.bitmap.data[dstIdx] = (_src.a * (_src.r - dst.r) - dst.r + 255 >> 8) + dst.r;\n          baseImage.bitmap.data[dstIdx + 1] = (_src.a * (_src.g - dst.g) - dst.g + 255 >> 8) + dst.g;\n          baseImage.bitmap.data[dstIdx + 2] = (_src.a * (_src.b - dst.b) - dst.b + 255 >> 8) + dst.b;\n          baseImage.bitmap.data[dstIdx + 3] = this.constructor.limit255(dst.a + _src.a);\n        }\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"mappings":"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","names":["blit","src","x","y","srcx","srcy","srcw","srch","cb","constructor","throwError","call","bitmap","width","height","Math","round","maxWidth","maxHeight","baseImage","scanQuiet","sx","sy","idx","xOffset","yOffset","dstIdx","getPixelIndex","r","data","g","b","a","dst","limit255"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\@jimp\\plugin-blit\\src\\index.js"],"sourcesContent":["import { throwError, isNodePattern } from '@jimp/utils';\n\nexport default () => ({\n  /**\n   * Blits a source image on to this image\n   * @param {Jimp} src the source Jimp instance\n   * @param {number} x the x position to blit the image\n   * @param {number} y the y position to blit the image\n   * @param {number} srcx (optional) the x position from which to crop the source image\n   * @param {number} srcy (optional) the y position from which to crop the source image\n   * @param {number} srcw (optional) the width to which to crop the source image\n   * @param {number} srch (optional) the height to which to crop the source image\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  blit(src, x, y, srcx, srcy, srcw, srch, cb) {\n    if (!(src instanceof this.constructor)) {\n      return throwError.call(this, 'The source must be a Jimp image', cb);\n    }\n\n    if (typeof x !== 'number' || typeof y !== 'number') {\n      return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    if (typeof srcx === 'function') {\n      cb = srcx;\n      srcx = 0;\n      srcy = 0;\n      srcw = src.bitmap.width;\n      srch = src.bitmap.height;\n    } else if (\n      typeof srcx === typeof srcy &&\n      typeof srcy === typeof srcw &&\n      typeof srcw === typeof srch\n    ) {\n      srcx = srcx || 0;\n      srcy = srcy || 0;\n      srcw = srcw || src.bitmap.width;\n      srch = srch || src.bitmap.height;\n    } else {\n      return throwError.call(\n        this,\n        'srcx, srcy, srcw, srch must be numbers',\n        cb\n      );\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    // round input\n    srcx = Math.round(srcx);\n    srcy = Math.round(srcy);\n    srcw = Math.round(srcw);\n    srch = Math.round(srch);\n\n    const maxWidth = this.bitmap.width;\n    const maxHeight = this.bitmap.height;\n    const baseImage = this;\n\n    src.scanQuiet(srcx, srcy, srcw, srch, function(sx, sy, idx) {\n      const xOffset = x + sx - srcx;\n      const yOffset = y + sy - srcy;\n\n      if (\n        xOffset >= 0 &&\n        yOffset >= 0 &&\n        maxWidth - xOffset > 0 &&\n        maxHeight - yOffset > 0\n      ) {\n        const dstIdx = baseImage.getPixelIndex(xOffset, yOffset);\n        const src = {\n          r: this.bitmap.data[idx],\n          g: this.bitmap.data[idx + 1],\n          b: this.bitmap.data[idx + 2],\n          a: this.bitmap.data[idx + 3]\n        };\n\n        const dst = {\n          r: baseImage.bitmap.data[dstIdx],\n          g: baseImage.bitmap.data[dstIdx + 1],\n          b: baseImage.bitmap.data[dstIdx + 2],\n          a: baseImage.bitmap.data[dstIdx + 3]\n        };\n\n        baseImage.bitmap.data[dstIdx] =\n          ((src.a * (src.r - dst.r) - dst.r + 255) >> 8) + dst.r;\n        baseImage.bitmap.data[dstIdx + 1] =\n          ((src.a * (src.g - dst.g) - dst.g + 255) >> 8) + dst.g;\n        baseImage.bitmap.data[dstIdx + 2] =\n          ((src.a * (src.b - dst.b) - dst.b + 255) >> 8) + dst.b;\n        baseImage.bitmap.data[dstIdx + 3] = this.constructor.limit255(\n          dst.a + src.a\n        );\n      }\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}