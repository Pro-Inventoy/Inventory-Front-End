{"ast":null,"code":"import invariant from 'invariant';\nimport { NativeEventEmitter, Platform } from 'react-native';\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule;\n  _eventEmitter;\n\n  constructor(nativeModule) {\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule);\n  }\n\n  addListener(eventName, listener) {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      }\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName) {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount ? // @ts-ignore: this is available since 0.64\n    this._eventEmitter.listenerCount(eventName) : // @ts-ignore: this is available in older versions\n    this._eventEmitter.listeners(eventName).length;\n\n    this._eventEmitter.removeAllListeners(eventName);\n\n    this._listenerCount -= removedListenerCount;\n    invariant(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription) {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    if ('remove' in nativeEmitterSubscription) {\n      // `react-native-web@0.17.1` doesn't support `removeSubscription`\n      nativeEmitterSubscription.remove();\n    } else if ('removeSubscription' in this._eventEmitter) {\n      this._eventEmitter.removeSubscription(nativeEmitterSubscription);\n    }\n\n    this._listenerCount--; // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n\n    delete subscription[nativeEmitterSubscriptionKey]; // Release closed-over references to the emitter\n\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName) {\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    this._eventEmitter.emit(eventName, ...params);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,kBAAT,EAA6BC,QAA7B,QAA6C,cAA7C;AAEA,MAAMC,4BAA4B,GAAG,+BAArC;AAiBA,OAAM,MAAOC,YAAP,CAAmB;EACvBC,cAAc,GAAG,CAAH;EACdC,aAAa;EACbC,aAAa;;EAEbC,YAAYC,YAAZ,EAAsC;IACpC,KAAKH,aAAL,GAAqBG,YAArB;IACA,KAAKF,aAAL,GAAqB,IAAIN,kBAAJ,CAAuBQ,YAAvB,CAArB;EACD;;EAEDC,WAAW,CAAIC,SAAJ,EAAuBC,QAAvB,EAAmD;IAC5D,IAAI,CAAC,KAAKP,cAAN,IAAwBH,QAAQ,CAACW,EAAT,KAAgB,KAAxC,IAAiD,KAAKP,aAAL,CAAmBQ,cAAxE,EAAwF;MACtF,KAAKR,aAAL,CAAmBQ,cAAnB;IACD;;IAED,KAAKT,cAAL;;IACA,MAAMU,yBAAyB,GAAG,KAAKR,aAAL,CAAmBG,WAAnB,CAA+BC,SAA/B,EAA0CC,QAA1C,CAAlC;;IACA,MAAMI,YAAY,GAAG;MACnB,CAACb,4BAAD,GAAgCY,yBADb;MAEnBE,MAAM,EAAE,MAAK;QACX,KAAKC,kBAAL,CAAwBF,YAAxB;MACD;IAJkB,CAArB;IAMA,OAAOA,YAAP;EACD;;EAEDG,kBAAkB,CAACR,SAAD,EAAkB;IAClC;IACA,MAAMS,oBAAoB,GAAG,KAAKb,aAAL,CAAmBc,aAAnB,GACzB;IACA,KAAKd,aAAL,CAAmBc,aAAnB,CAAiCV,SAAjC,CAFyB,GAGzB;IACA,KAAKJ,aAAL,CAAmBe,SAAnB,CAA6BX,SAA7B,EAAwCY,MAJ5C;;IAKA,KAAKhB,aAAL,CAAmBY,kBAAnB,CAAsCR,SAAtC;;IACA,KAAKN,cAAL,IAAuBe,oBAAvB;IACApB,SAAS,CACP,KAAKK,cAAL,IAAuB,CADhB,EAEP,2DAFO,CAAT;;IAKA,IAAI,CAAC,KAAKA,cAAN,IAAwBH,QAAQ,CAACW,EAAT,KAAgB,KAAxC,IAAiD,KAAKP,aAAL,CAAmBkB,aAAxE,EAAuF;MACrF,KAAKlB,aAAL,CAAmBkB,aAAnB;IACD;EACF;;EAEDN,kBAAkB,CAACF,YAAD,EAA2B;IAC3C,MAAMD,yBAAyB,GAAGC,YAAY,CAACb,4BAAD,CAA9C;;IACA,IAAI,CAACY,yBAAL,EAAgC;MAC9B;IACD;;IAED,IAAI,YAAYA,yBAAhB,EAA2C;MACzC;MACAA,yBAAyB,CAACE,MAA1B;IACD,CAHD,MAGO,IAAI,wBAAwB,KAAKV,aAAjC,EAAgD;MACrD,KAAKA,aAAL,CAAmBW,kBAAnB,CAAsCH,yBAAtC;IACD;;IACD,KAAKV,cAAL,GAZ2C,CAc3C;IACA;;IACA,OAAOW,YAAY,CAACb,4BAAD,CAAnB,CAhB2C,CAkB3C;;IACAa,YAAY,CAACC,MAAb,GAAsB,MAAK,CAAG,CAA9B;;IAEA,IAAI,CAAC,KAAKZ,cAAN,IAAwBH,QAAQ,CAACW,EAAT,KAAgB,KAAxC,IAAiD,KAAKP,aAAL,CAAmBkB,aAAxE,EAAuF;MACrF,KAAKlB,aAAL,CAAmBkB,aAAnB;IACD;EACF;;EAEDC,IAAI,CAACd,SAAD,EAAoC;IAAA,kCAAbe,MAAa;MAAbA,MAAa;IAAA;;IACtC,KAAKnB,aAAL,CAAmBkB,IAAnB,CAAwBd,SAAxB,EAAmC,GAAGe,MAAtC;EACD;;AAzEsB","names":["invariant","NativeEventEmitter","Platform","nativeEmitterSubscriptionKey","EventEmitter","_listenerCount","_nativeModule","_eventEmitter","constructor","nativeModule","addListener","eventName","listener","OS","startObserving","nativeEmitterSubscription","subscription","remove","removeSubscription","removeAllListeners","removedListenerCount","listenerCount","listeners","length","stopObserving","emit","params"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\expo-modules-core\\src\\EventEmitter.ts"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, Platform } from 'react-native';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// @needsAudit\nexport type Subscription = {\n  /**\n   * A method to unsubscribe the listener.\n   */\n  remove: () => void;\n};\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule as any);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount\n      ? // @ts-ignore: this is available since 0.64\n        this._eventEmitter.listenerCount(eventName)\n      : // @ts-ignore: this is available in older versions\n        this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    if ('remove' in nativeEmitterSubscription) {\n      // `react-native-web@0.17.1` doesn't support `removeSubscription`\n      nativeEmitterSubscription.remove();\n    } else if ('removeSubscription' in this._eventEmitter) {\n      this._eventEmitter.removeSubscription(nativeEmitterSubscription!);\n    }\n    this._listenerCount--;\n\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    delete subscription[nativeEmitterSubscriptionKey];\n\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}