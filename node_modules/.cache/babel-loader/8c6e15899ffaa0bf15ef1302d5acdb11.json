{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _jpegJs = _interopRequireDefault(require(\"jpeg-js\"));\n\nvar _utils = require(\"@jimp/utils\");\n\nvar MIME_TYPE = 'image/jpeg';\n\nvar _default = function _default() {\n  return {\n    mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, ['jpeg', 'jpg', 'jpe']),\n    constants: {\n      MIME_JPEG: MIME_TYPE\n    },\n    decoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, _jpegJs[\"default\"].decode),\n    encoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function (image) {\n      return _jpegJs[\"default\"].encode(image.bitmap, image._quality).data;\n    }),\n    \"class\": {\n      // The quality to be used when saving JPEG images\n      _quality: 100,\n\n      /**\n       * Sets the quality of the image when saving as JPEG format (default is 100)\n       * @param {number} n The quality to use 0-100\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      quality: function quality(n, cb) {\n        if (typeof n !== 'number') {\n          return _utils.throwError.call(this, 'n must be a number', cb);\n        }\n\n        if (n < 0 || n > 100) {\n          return _utils.throwError.call(this, 'n must be a number 0 - 100', cb);\n        }\n\n        this._quality = Math.round(n);\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      }\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,SAAS,GAAG,YAAlB;;eAEe;EAAA,OAAO;IACpBC,IAAI,uCAAKD,SAAL,EAAiB,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,CAAjB,CADgB;IAGpBE,SAAS,EAAE;MACTC,SAAS,EAAEH;IADF,CAHS;IAOpBI,QAAQ,uCACLJ,SADK,EACOK,mBAAKC,MADZ,CAPY;IAWpBC,QAAQ,uCACLP,SADK,EACO,iBAAK;MAAA,OAAIK,mBAAKG,MAALH,CAAYI,KAAK,CAACC,MAAlBL,EAA0BI,KAAK,CAACE,QAAhCN,EAA0CO,IAA9C;IADZ,EAXY;IAepB,SAAO;MACL;MACAD,QAAQ,EAAE,GAFL;;MAGL;;;;;;MAMAE,OATK,mBASGC,CATH,EASMC,EATN,EASU;QACb,IAAI,OAAOD,CAAP,KAAa,QAAjB,EAA2B;UACzB,OAAOE,kBAAWC,IAAXD,CAAgB,IAAhBA,EAAsB,oBAAtBA,EAA4CD,EAA5CC,CAAP;QACD;;QAED,IAAIF,CAAC,GAAG,CAAJA,IAASA,CAAC,GAAG,GAAjB,EAAsB;UACpB,OAAOE,kBAAWC,IAAXD,CAAgB,IAAhBA,EAAsB,4BAAtBA,EAAoDD,EAApDC,CAAP;QACD;;QAED,KAAKL,QAAL,GAAgBO,IAAI,CAACC,KAALD,CAAWJ,CAAXI,CAAhB;;QAEA,IAAI,0BAAcH,EAAd,CAAJ,EAAuB;UACrBA,EAAE,CAACE,IAAHF,CAAQ,IAARA,EAAc,IAAdA,EAAoB,IAApBA;QACD;;QAED,OAAO,IAAP;MACD;IAzBI;EAfa,CAAP","names":["MIME_TYPE","mime","constants","MIME_JPEG","decoders","JPEG","decode","encoders","encode","image","bitmap","_quality","data","quality","n","cb","throwError","call","Math","round"],"sources":["C:\\Users\\khaym\\Desktop\\finalproject\\Inventory-Front-End\\node_modules\\@jimp\\jpeg\\src\\index.js"],"sourcesContent":["import JPEG from 'jpeg-js';\nimport { throwError, isNodePattern } from '@jimp/utils';\n\nconst MIME_TYPE = 'image/jpeg';\n\nexport default () => ({\n  mime: { [MIME_TYPE]: ['jpeg', 'jpg', 'jpe'] },\n\n  constants: {\n    MIME_JPEG: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: JPEG.decode\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => JPEG.encode(image.bitmap, image._quality).data\n  },\n\n  class: {\n    // The quality to be used when saving JPEG images\n    _quality: 100,\n    /**\n     * Sets the quality of the image when saving as JPEG format (default is 100)\n     * @param {number} n The quality to use 0-100\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    quality(n, cb) {\n      if (typeof n !== 'number') {\n        return throwError.call(this, 'n must be a number', cb);\n      }\n\n      if (n < 0 || n > 100) {\n        return throwError.call(this, 'n must be a number 0 - 100', cb);\n      }\n\n      this._quality = Math.round(n);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}